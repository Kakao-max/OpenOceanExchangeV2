{
  "address": "0x9F92b2706c643ae6FDF2e9ca472f0E48497385f1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "balancerV2StablePoolState",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "balancerV2WeightedPoolState",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "nCoins",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "underlyingDecimals",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "rateCallee",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "rateCalldata",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICurveState.CurvePoolStateQuery",
          "name": "query",
          "type": "tuple"
        }
      ],
      "name": "curvePoolState",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "underlying_balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rates",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "A",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa17f5adc98ab26239f22b17776198d47a8c91f5a421be8252550afc6d6fd5d72",
  "receipt": {
    "to": null,
    "from": "0x9986EE0C3Eea15DCf8642b56179652F9589B95dB",
    "contractAddress": "0x9F92b2706c643ae6FDF2e9ca472f0E48497385f1",
    "transactionIndex": 68,
    "gasUsed": "1092021",
    "logsBloom": "0x
    "blockHash": "0x000086b00000058f948657a17c80cc0887e765e3073196dfb826090e81cbf0ae",
    "transactionHash": "0xa17f5adc98ab26239f22b17776198d47a8c91f5a421be8252550afc6d6fd5d72",
    "logs": [],
    "blockNumber": 16979175,
    "cumulativeGasUsed": "5076601",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "bf0a9a71403976a446e9fc7c2871aa70",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"balancerV2StablePoolState\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"balancerV2WeightedPoolState\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"nCoins\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rateCallee\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rateCalldata\",\"type\":\"bytes\"}],\"internalType\":\"struct ICurveState.CurvePoolStateQuery\",\"name\":\"query\",\"type\":\"tuple\"}],\"name\":\"curvePoolState\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"underlying_balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenOceanState.sol\":\"OpenOceanState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/OpenOceanState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/state/IOpenOceanState.sol\\\";\\nimport \\\"./state/BalancerV2State.sol\\\";\\nimport \\\"./state/CurveState.sol\\\";\\n\\ncontract OpenOceanState is IOpenOceanState, BalancerV2State, CurveState {}\\n\",\"keccak256\":\"0xbdd79e2f343e032229b2f97f760307e49bbf4a257b2dd2fed0600321368dbaa4\",\"license\":\"MIT\"},\"contracts/interfaces/state/IBalancerV2State.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVault {\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n}\\n\\ninterface IWeightedPool {\\n    function getNormalizedWeights() external view returns (uint256[] memory);\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n}\\n\\ninterface IStablePool {\\n    function getAmplificationParameter()\\n        external\\n        view\\n        returns (\\n            uint256 value,\\n            bool isUpdating,\\n            uint256 precision\\n        );\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n}\\n\\ninterface IBalancerV2State {\\n    function balancerV2WeightedPoolState(\\n        address vault,\\n        bytes32 poolId,\\n        address pool\\n    )\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 totalSupply,\\n            uint256[] memory weights,\\n            uint256 swapFee\\n        );\\n\\n    function balancerV2StablePoolState(\\n        address vault,\\n        bytes32 poolId,\\n        address pool\\n    )\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 totalSupply,\\n            uint256 amp,\\n            uint256 swapFee\\n        );\\n}\\n\\n// TODO add Balancer V2 element pools\\n\",\"keccak256\":\"0x3208ebf6856cc492d3b80be6b84630c3efe9e01973469834723c2981a893075d\",\"license\":\"MIT\"},\"contracts/interfaces/state/ICurveState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICurvePool {\\n    function A() external view returns (uint256);\\n\\n    function fee() external view returns (uint256);\\n}\\n\\n/**\\n * @notice Pool contracts of curve.fi\\n * See https://github.com/curvefi/curve-vue/blob/master/src/docs/README.md#how-to-integrate-curve-smart-contracts\\n */\\ninterface ICurvePoolV1 is ICurvePool {\\n    function balances(int128 i) external view returns (uint256); // v1 version\\n\\n    function coins(int128 i) external view returns (address);\\n\\n    function underlying_coins(int128 i) external view returns (address);\\n}\\n\\ninterface ICurvePoolV2 is ICurvePool {\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function underlying_coins(uint256 i) external view returns (address);\\n}\\n\\ninterface ICurveState {\\n    struct CurvePoolStateQuery {\\n        address pool;\\n        uint8 nCoins;\\n        uint8 version;\\n        uint256 underlyingDecimals;\\n        address rateCallee;\\n        bytes rateCalldata;\\n    }\\n\\n    function curvePoolState(CurvePoolStateQuery memory query)\\n        external\\n        view\\n        returns (\\n            uint256[] memory balances,\\n            uint256[] memory underlying_balances,\\n            uint256[] memory rates,\\n            uint256 A,\\n            uint256 fee\\n        );\\n}\\n\",\"keccak256\":\"0x291f42fd451c05350ec999a2af00133077c2cb0677725036f368d02ad6a2bbc8\",\"license\":\"MIT\"},\"contracts/interfaces/state/IOpenOceanState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBalancerV2State.sol\\\";\\nimport \\\"./ICurveState.sol\\\";\\n\\ninterface IOpenOceanState is IBalancerV2State, ICurveState {}\\n\",\"keccak256\":\"0x9e1816662994f6d1a2893cc25fa429d725969765b9af12d21c0bf7f6d834937e\",\"license\":\"MIT\"},\"contracts/state/BalancerV2State.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/state/IBalancerV2State.sol\\\";\\n\\nabstract contract BalancerV2State is IBalancerV2State {\\n    function balancerV2WeightedPoolState(\\n        address vault,\\n        bytes32 poolId,\\n        address pool\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 totalSupply,\\n            uint256[] memory weights,\\n            uint256 swapFee\\n        )\\n    {\\n        (tokens, balances, ) = IVault(vault).getPoolTokens(poolId);\\n        totalSupply = IERC20(pool).totalSupply();\\n        weights = IWeightedPool(pool).getNormalizedWeights();\\n        swapFee = IWeightedPool(pool).getSwapFeePercentage();\\n        return (tokens, balances, totalSupply, weights, swapFee);\\n    }\\n\\n    function balancerV2StablePoolState(\\n        address vault,\\n        bytes32 poolId,\\n        address pool\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 totalSupply,\\n            uint256 amp,\\n            uint256 swapFee\\n        )\\n    {\\n        (tokens, balances, ) = IVault(vault).getPoolTokens(poolId);\\n        totalSupply = IERC20(pool).totalSupply();\\n        (amp, , ) = IStablePool(pool).getAmplificationParameter();\\n        swapFee = IStablePool(pool).getSwapFeePercentage();\\n        return (tokens, balances, totalSupply, amp, swapFee);\\n    }\\n}\\n\",\"keccak256\":\"0x402965d78064f6cc6e14dfaecb7622959c1d78a0435e3c56d8233df0de8aeaed\",\"license\":\"MIT\"},\"contracts/state/CurveState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/state/ICurveState.sol\\\";\\n\\nabstract contract CurveState is ICurveState {\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    function curvePoolState(ICurveState.CurvePoolStateQuery memory query)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256[] memory balances,\\n            uint256[] memory underlying_balances,\\n            uint256[] memory rates,\\n            uint256 A,\\n            uint256 fee\\n        )\\n    {\\n        balances = new uint256[](8);\\n        for (uint256 i = 0; i < query.nCoins; i++) {\\n            balances[i] = query.version == 1 ? ICurvePoolV1(query.pool).balances(int128(i)) : ICurvePoolV2(query.pool).balances(i);\\n        }\\n\\n        rates = new uint256[](8);\\n        if (query.underlyingDecimals > 0) {\\n            address callee = query.rateCallee;\\n            bytes memory data = query.rateCalldata;\\n            address[] memory coins = new address[](query.nCoins);\\n            if (data.length > 0 && callee == address(0)) {\\n                for (uint256 i = 0; i < query.nCoins; i++) {\\n                    coins[i] = query.version == 1 ? ICurvePoolV1(query.pool).coins(int128(i)) : ICurvePoolV2(query.pool).coins(i);\\n                }\\n            }\\n            for (uint256 i = 0; i < query.nCoins; i++) {\\n                if (data.length == 0) {\\n                    rates[i] = 1e18;\\n                } else {\\n                    bytes memory result = (callee == address(0) ? coins[i] : callee).functionStaticCall(data);\\n                    rates[i] = abi.decode(result, (uint256));\\n                }\\n            }\\n        } else {\\n            for (uint256 i = 0; i < query.nCoins; i++) {\\n                rates[i] = 1e18;\\n            }\\n        }\\n\\n        underlying_balances = new uint256[](8);\\n        if (query.underlyingDecimals > 0) {\\n            for (uint256 i = 0; i < query.nCoins; i++) {\\n                uint256 decimal = (query.underlyingDecimals >> (8 * i)) % 256;\\n                underlying_balances[i] = balances[i].mul(rates[i]).div(10**decimal);\\n            }\\n        }\\n\\n        A = ICurvePool(query.pool).A();\\n        fee = ICurvePool(query.pool).fee();\\n\\n        return (balances, underlying_balances, rates, A, fee);\\n    }\\n}\\n\",\"keccak256\":\"0x26a60422342b60679a4075c97876794b5443b42739a023ad10d16996f94d457d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80631001f934146100465780631e308cb314610073578063841ae84d14610097575b600080fd5b610059610054366004610e59565b6100bb565b60405161006a95949392919061108d565b60405180910390f35b610086610081366004610d11565b6106d2565b60405161006a95949392919061104a565b6100aa6100a5366004610d11565b6108cc565b60405161006a959493929190610ff8565b6040805160088082526101208201909252606091829182916000918291602082016101008036833701905050945060005b866020015160ff1681101561022b57866040015160ff1660011461018e578651604051634903b0d160e01b81526001600160a01b0390911690634903b0d1906101399084906004016110db565b60206040518083038186803b15801561015157600080fd5b505afa158015610165573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101899190610f16565b61020c565b865160405162cb501b60e31b81526001600160a01b039091169063065a80d8906101bc9084906004016110e4565b60206040518083038186803b1580156101d457600080fd5b505afa1580156101e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020c9190610f16565b86828151811061021857fe5b60209081029190910101526001016100ec565b5060408051600880825261012082019092529060208201610100803683375050506060870151909350156104de57608086015160a0870151602088015160609060ff1667ffffffffffffffff8111801561028457600080fd5b506040519080825280602002602001820160405280156102ae578160200160208202803683370190505b509050600082511180156102c957506001600160a01b038316155b156104205760005b896020015160ff1681101561041e57896040015160ff1660011461037357895160405163c661065760e01b81526001600160a01b039091169063c66106579061031e9084906004016110db565b60206040518083038186803b15801561033657600080fd5b505afa15801561034a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036e9190610cf5565b6103f2565b895160405163046e8dd760e31b81526001600160a01b03909116906323746eb8906103a29084906004016110e4565b60206040518083038186803b1580156103ba57600080fd5b505afa1580156103ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f29190610cf5565b8282815181106103fe57fe5b6001600160a01b03909216602092830291909101909101526001016102d1565b505b60005b896020015160ff168110156104d557825161045e57670de0b6b3a764000087828151811061044d57fe5b6020026020010181815250506104cd565b606061049d846001600160a01b03871615610479578661048e565b84848151811061048557fe5b60200260200101515b6001600160a01b031690610a81565b9050808060200190518101906104b39190610f16565b8883815181106104bf57fe5b602002602001018181525050505b600101610423565b5050505061051a565b60005b866020015160ff1681101561051857670de0b6b3a764000084828151811061050557fe5b60209081029190910101526001016104e1565b505b60408051600880825261012082019092529060208201610100803683375050506060870151909450156105db5760005b866020015160ff168110156105d9576000610100826008028960600151901c8161057057fe5b0690506105b981600a0a6105b387858151811061058957fe5b60200260200101518a868151811061059d57fe5b6020026020010151610aaf90919063ffffffff16565b90610af2565b8683815181106105c557fe5b60209081029190910101525060010161054a565b505b85600001516001600160a01b031663f446c1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561061857600080fd5b505afa15801561062c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106509190610f16565b915085600001516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561068f57600080fd5b505afa1580156106a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c79190610f16565b905091939590929450565b6060806000806000876001600160a01b031663f94d4668886040518263ffffffff1660e01b815260040161070691906110db565b60006040518083038186803b15801561071e57600080fd5b505afa158015610732573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261075a9190810190610d52565b508095508196505050856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561079c57600080fd5b505afa1580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d49190610f16565b9250856001600160a01b0316636daccffa6040518163ffffffff1660e01b815260040160606040518083038186803b15801561080f57600080fd5b505afa158015610823573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108479190610f2e565b90505080925050856001600160a01b03166355c676286040518163ffffffff1660e01b815260040160206040518083038186803b15801561088757600080fd5b505afa15801561089b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bf9190610f16565b9050939792965093509350565b606080600060606000876001600160a01b031663f94d4668886040518263ffffffff1660e01b815260040161090191906110db565b60006040518083038186803b15801561091957600080fd5b505afa15801561092d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109559190810190610d52565b508095508196505050856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561099757600080fd5b505afa1580156109ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cf9190610f16565b9250856001600160a01b031663f89f27ed6040518163ffffffff1660e01b815260040160006040518083038186803b158015610a0a57600080fd5b505afa158015610a1e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a469190810190610e1e565b9150856001600160a01b03166355c676286040518163ffffffff1660e01b815260040160206040518083038186803b15801561088757600080fd5b6060610aa6838360405180606001604052806025815260200161127160259139610b24565b90505b92915050565b600082610abe57506000610aa9565b82820282848281610acb57fe5b0414610aa65760405162461bcd60e51b8152600401610ae99061115c565b60405180910390fd5b6000808211610b135760405162461bcd60e51b8152600401610ae990611125565b818381610b1c57fe5b049392505050565b6060610b2f84610bc3565b610b4b5760405162461bcd60e51b8152600401610ae99061119d565b60006060856001600160a01b031685604051610b679190610fdc565b600060405180830381855afa9150503d8060008114610ba2576040519150601f19603f3d011682016040523d82523d6000602084013e610ba7565b606091505b5091509150610bb7828286610bc9565b925050505b9392505050565b3b151590565b60608315610bd8575081610bbc565b825115610be85782518084602001fd5b8160405162461bcd60e51b8152600401610ae991906110f2565b8035610aa981611258565b600082601f830112610c1d578081fd5b8151610c30610c2b82611208565b6111e1565b818152915060208083019084810181840286018201871015610c5157600080fd5b60005b84811015610c7057815184529282019290820190600101610c54565b505050505092915050565b600082601f830112610c8b578081fd5b813567ffffffffffffffff811115610ca1578182fd5b610cb4601f8201601f19166020016111e1565b9150808252836020828501011115610ccb57600080fd5b8060208401602084013760009082016020015292915050565b803560ff81168114610aa957600080fd5b600060208284031215610d06578081fd5b8151610aa681611258565b600080600060608486031215610d25578182fd5b8335610d3081611258565b9250602084013591506040840135610d4781611258565b809150509250925092565b600080600060608486031215610d66578283fd5b835167ffffffffffffffff80821115610d7d578485fd5b818601915086601f830112610d90578485fd5b8151610d9e610c2b82611208565b80828252602080830192508086018b828387028901011115610dbe57898afd5b8996505b84871015610de9578051610dd581611258565b845260019690960195928101928101610dc2565b508901519097509350505080821115610e00578384fd5b50610e0d86828701610c0d565b925050604084015190509250925092565b600060208284031215610e2f578081fd5b815167ffffffffffffffff811115610e45578182fd5b610e5184828501610c0d565b949350505050565b600060208284031215610e6a578081fd5b813567ffffffffffffffff80821115610e81578283fd5b9083019060c08286031215610e94578283fd5b610e9e60c06111e1565b610ea88684610c02565b8152610eb78660208501610ce4565b6020820152610ec98660408501610ce4565b604082015260608301356060820152610ee58660808501610c02565b608082015260a083013582811115610efb578485fd5b610f0787828601610c7b565b60a08301525095945050505050565b600060208284031215610f27578081fd5b5051919050565b600080600060608486031215610f42578283fd5b8351925060208401518015158114610f58578283fd5b80925050604084015190509250925092565b6000815180845260208085019450808401835b83811015610fa25781516001600160a01b031687529582019590820190600101610f7d565b509495945050505050565b6000815180845260208085019450808401835b83811015610fa257815187529582019590820190600101610fc0565b60008251610fee818460208701611228565b9190910192915050565b600060a0825261100b60a0830188610f6a565b828103602084015261101d8188610fad565b905085604084015282810360608401526110378186610fad565b9150508260808301529695505050505050565b600060a0825261105d60a0830188610f6a565b828103602084015261106f8188610fad565b60408401969096525050606081019290925260809091015292915050565b600060a082526110a060a0830188610fad565b82810360208401526110b28188610fad565b905082810360408401526110c68187610fad565b60608401959095525050608001529392505050565b90815260200190565b600f9190910b815260200190565b6000602082528251806020840152611111816040850160208701611228565b601f01601f19169190910160400192915050565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526024908201527f416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e746040820152631c9858dd60e21b606082015260800190565b60405181810167ffffffffffffffff8111828210171561120057600080fd5b604052919050565b600067ffffffffffffffff82111561121e578081fd5b5060209081020190565b60005b8381101561124357818101518382015260200161122b565b83811115611252576000848401525b50505050565b6001600160a01b038116811461126d57600080fd5b5056fe416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564a264697066735822122001601ee3fb54792a66fe66b083244e2dbc9273db998b04f8033b7d036ab4ac5264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}