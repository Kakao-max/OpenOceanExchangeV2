{
  "address": "0x170100a288dc3d7e83fea20441F98166B15b6dF0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "balancerV2StablePoolState",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "balancerV2WeightedPoolState",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "nCoins",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "underlyingDecimals",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "rateCallee",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "rateCalldata",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICurveState.CurvePoolStateQuery",
          "name": "query",
          "type": "tuple"
        }
      ],
      "name": "curvePoolState",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "underlying_balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rates",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "A",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IGambitVault",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "gambitState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "inManagerMode",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isSwapEnabled",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "minPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "maxPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "stableFlag",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "usdgAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "targetUsdgAmounts",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stableSwapFeeBasisPoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapFeeBasisPoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stableTaxBasisPoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taxBasisPoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintBurnFeeBasisPoints",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasDynamicFees",
              "type": "bool"
            }
          ],
          "internalType": "struct IGambitState.GambitStateFee",
          "name": "fee",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "whitelistFlag",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "platypusAssetState",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liability",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "platypusPoolState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "c1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "xThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slippageParamK",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slippageParamN",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircutRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPriceDeviation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smoothyV1",
          "type": "address"
        }
      ],
      "name": "smoothyV1State",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenInfos",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenBalances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "woo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "wooState",
      "outputs": [
        {
          "internalType": "uint112",
          "name": "",
          "type": "uint112"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "uint112",
          "name": "",
          "type": "uint112"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb306f6bb9a3f9208893ad9e8291796b3016ddd4fda87d2640a295ee37578555",
  "receipt": {
    "to": null,
    "from": "0x9986EE0C3Eea15DCf8642b56179652F9589B95dB",
    "contractAddress": "0x170100a288dc3d7e83fea20441F98166B15b6dF0",
    "transactionIndex": 13,
    "gasUsed": "2590711",
    "logsBloom": "0x
    "blockHash": "0x720375b6810f8d554b4bf3b66a4b6aa5bcb34f46a2ed3afddf2ccdb71ed7e862",
    "transactionHash": "0xdb306f6bb9a3f9208893ad9e8291796b3016ddd4fda87d2640a295ee37578555",
    "logs": [],
    "blockNumber": 12212471,
    "cumulativeGasUsed": "5577864",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "05add40c250b0eea51761ae42ff9bb0d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"balancerV2StablePoolState\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"balancerV2WeightedPoolState\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"nCoins\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rateCallee\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rateCalldata\",\"type\":\"bytes\"}],\"internalType\":\"struct ICurveState.CurvePoolStateQuery\",\"name\":\"query\",\"type\":\"tuple\"}],\"name\":\"curvePoolState\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"underlying_balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGambitVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"gambitState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inManagerMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSwapEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"minPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"stableFlag\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"usdgAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"targetUsdgAmounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stableSwapFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableTaxBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintBurnFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasDynamicFees\",\"type\":\"bool\"}],\"internalType\":\"struct IGambitState.GambitStateFee\",\"name\":\"fee\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"whitelistFlag\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"platypusAssetState\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liability\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"platypusPoolState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"c1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageParamK\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageParamN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircutRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceDeviation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smoothyV1\",\"type\":\"address\"}],\"name\":\"smoothyV1State\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenInfos\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"woo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"wooState\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenOceanState.sol\":\"OpenOceanState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/OpenOceanState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/state/IOpenOceanState.sol\\\";\\nimport \\\"./state/BalancerV2State.sol\\\";\\nimport \\\"./state/CurveState.sol\\\";\\nimport \\\"./state/SmoothyState.sol\\\";\\nimport \\\"./state/WooState.sol\\\";\\nimport \\\"./state/PlatypusState.sol\\\";\\nimport \\\"./state/GambitState.sol\\\";\\n\\ncontract OpenOceanState is IOpenOceanState, BalancerV2State, CurveState, SmoothyState, WooState, PlatypusState, GambitState {}\\n\",\"keccak256\":\"0x94be17234f765937926d22801a74da45cc09449c02a1aa348d3d587add1e3d12\",\"license\":\"MIT\"},\"contracts/interfaces/state/IBalancerV2State.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVault {\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n}\\n\\ninterface IWeightedPool {\\n    function getNormalizedWeights() external view returns (uint256[] memory);\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n}\\n\\ninterface IStablePool {\\n    function getAmplificationParameter()\\n        external\\n        view\\n        returns (\\n            uint256 value,\\n            bool isUpdating,\\n            uint256 precision\\n        );\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n}\\n\\ninterface IBalancerV2State {\\n    function balancerV2WeightedPoolState(\\n        address vault,\\n        bytes32 poolId,\\n        address pool\\n    )\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 totalSupply,\\n            uint256[] memory weights,\\n            uint256 swapFee\\n        );\\n\\n    function balancerV2StablePoolState(\\n        address vault,\\n        bytes32 poolId,\\n        address pool\\n    )\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 totalSupply,\\n            uint256 amp,\\n            uint256 swapFee\\n        );\\n}\\n\\n// TODO add Balancer V2 element pools\\n\",\"keccak256\":\"0x3208ebf6856cc492d3b80be6b84630c3efe9e01973469834723c2981a893075d\",\"license\":\"MIT\"},\"contracts/interfaces/state/ICurveState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICurvePool {\\n    function A() external view returns (uint256);\\n\\n    function fee() external view returns (uint256);\\n}\\n\\n/**\\n * @notice Pool contracts of curve.fi\\n * See https://github.com/curvefi/curve-vue/blob/master/src/docs/README.md#how-to-integrate-curve-smart-contracts\\n */\\ninterface ICurvePoolV1 is ICurvePool {\\n    function balances(int128 i) external view returns (uint256); // v1 version\\n\\n    function coins(int128 i) external view returns (address);\\n\\n    function underlying_coins(int128 i) external view returns (address);\\n}\\n\\ninterface ICurvePoolV2 is ICurvePool {\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function underlying_coins(uint256 i) external view returns (address);\\n}\\n\\ninterface ICurveState {\\n    struct CurvePoolStateQuery {\\n        address pool;\\n        uint8 nCoins;\\n        uint8 version;\\n        uint256 underlyingDecimals;\\n        address rateCallee;\\n        bytes rateCalldata;\\n    }\\n\\n    function curvePoolState(CurvePoolStateQuery memory query)\\n        external\\n        view\\n        returns (\\n            uint256[] memory balances,\\n            uint256[] memory underlying_balances,\\n            uint256[] memory rates,\\n            uint256 A,\\n            uint256 fee\\n        );\\n}\\n\",\"keccak256\":\"0x291f42fd451c05350ec999a2af00133077c2cb0677725036f368d02ad6a2bbc8\",\"license\":\"MIT\"},\"contracts/interfaces/state/IGambitState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGambitVault {\\n    function inManagerMode() external view returns (bool);\\n\\n    function isSwapEnabled() external view returns (bool);\\n\\n    function getMinPrice(address) external view returns (uint256);\\n\\n    function getMaxPrice(address) external view returns (uint256);\\n\\n    function stableTokens(address) external view returns (bool);\\n\\n    function usdgAmounts(address) external view returns (uint256);\\n\\n    function getTargetUsdgAmount(address) external view returns (uint256);\\n\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n\\n    function swapFeeBasisPoints() external view returns (uint256);\\n\\n    function stableTaxBasisPoints() external view returns (uint256);\\n\\n    function taxBasisPoints() external view returns (uint256);\\n\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n\\n    function hasDynamicFees() external view returns (bool);\\n\\n    function whitelistedTokens(address) external view returns (bool);\\n}\\n\\ninterface IGambitState {\\n    struct GambitStateFee {\\n        uint256 stableSwapFeeBasisPoints;\\n        uint256 swapFeeBasisPoints;\\n        uint256 stableTaxBasisPoints;\\n        uint256 taxBasisPoints;\\n        uint256 mintBurnFeeBasisPoints;\\n        bool hasDynamicFees;\\n    }\\n\\n    function gambitState(IGambitVault vault, address[] calldata tokens)\\n        external\\n        view\\n        returns (\\n            bool inManagerMode,\\n            bool isSwapEnabled,\\n            uint256[] memory minPrices,\\n            uint256[] memory maxPrices,\\n            uint256 stableFlag,\\n            uint256[] memory usdgAmounts,\\n            uint256[] memory targetUsdgAmounts,\\n            GambitStateFee memory fee,\\n            uint256 whitelistFlag\\n        );\\n}\\n\",\"keccak256\":\"0xd3c7dfc1c27d0dfe7fff76d49c1abb13d884fd06851df70d5e191bd59f0f5f6b\",\"license\":\"MIT\"},\"contracts/interfaces/state/IOpenOceanState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBalancerV2State.sol\\\";\\nimport \\\"./ICurveState.sol\\\";\\nimport \\\"./ISmoothyState.sol\\\";\\nimport \\\"./IWooState.sol\\\";\\nimport \\\"./IPlatypusState.sol\\\";\\nimport \\\"./IGambitState.sol\\\";\\n\\ninterface IOpenOceanState is IBalancerV2State, ICurveState, ISmoothyState, IWooState, IPlatypusState, IGambitState {}\\n\",\"keccak256\":\"0x6f8b49fbebe731f53ffcc5c2bf3fc435056f42b28614504b66c8b18ae50b1c96\",\"license\":\"MIT\"},\"contracts/interfaces/state/IPlatypusState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface IPriceOracleGetter {\\n    /**\\n    @dev returns the asset price in ETH\\n     */\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n}\\n\\ninterface IPlatypusPool {\\n    function paused() external view returns (bool);\\n\\n    function assetOf(address token) external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function getC1() external view returns (uint256);\\n\\n    function getXThreshold() external view returns (uint256);\\n\\n    function getSlippageParamK() external view returns (uint256);\\n\\n    function getSlippageParamN() external view returns (uint256);\\n\\n    function getHaircutRate() external view returns (uint256);\\n\\n    function getMaxPriceDeviation() external view returns (uint256);\\n}\\n\\ninterface IPlatypusAsset {\\n    function decimals() external view returns (uint8);\\n\\n    function cash() external view returns (uint256);\\n\\n    function liability() external view returns (uint256);\\n}\\n\\ninterface IPlatypusState {\\n    function platypusPoolState(address pool)\\n        external\\n        view\\n        returns (\\n            bool paused,\\n            uint256 c1,\\n            uint256 xThreshold,\\n            uint256 slippageParamK,\\n            uint256 slippageParamN,\\n            uint256 haircutRate,\\n            uint256 maxPriceDeviation\\n        );\\n\\n    function platypusAssetState(address pool, address token)\\n        external\\n        view\\n        returns (\\n            uint8 decimals,\\n            uint256 price,\\n            uint256 cash,\\n            uint256 liability\\n        );\\n}\\n\",\"keccak256\":\"0x29c73245585717d0226f439ecd2522ccd0c134bb40509c2ab80ad125a8e37108\",\"license\":\"MIT\"},\"contracts/interfaces/state/ISmoothyState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface ISmoothyV1 {\\n    function _ntokens() external view returns (uint256);\\n\\n    function _tokenInfos(uint256) external view returns (uint256);\\n\\n    function getBalance(uint256 tid) external view returns (uint256);\\n\\n    function _totalBalance() external view returns (uint256);\\n\\n    function _swapFee() external view returns (uint256);\\n}\\n\\ninterface ISmoothyState {\\n    function smoothyV1State(address smoothyV1)\\n        external\\n        view\\n        returns (\\n            uint256[] memory tokenInfos,\\n            uint256[] memory tokenBalances,\\n            uint256 totalBalance,\\n            uint256 swapFee\\n        );\\n}\\n\",\"keccak256\":\"0x29892f13d27b89ae536712bd97198fa960f2b03331107e79a97b6b3b5655060a\",\"license\":\"MIT\"},\"contracts/interfaces/state/IWooState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IWooPP {\\n    /// @dev struct info to store the token info\\n    struct TokenInfo {\\n        uint112 reserve; // Token balance\\n        uint112 threshold; // Threshold for reserve update\\n        uint32 lastResetTimestamp; // Timestamp for last param update\\n        uint64 R; // Rebalance coefficient [0, 1]\\n        uint112 target; // Targeted balance for pricing\\n        bool isValid; // is this token info valid\\n    }\\n\\n    function tokenInfo(address)\\n        external\\n        view\\n        returns (\\n            uint112 reserve, // Token balance\\n            uint112 threshold, // Threshold for reserve update\\n            uint32 lastResetTimestamp, // Timestamp for last param update\\n            uint64 R, // Rebalance coefficient [0, 1]\\n            uint112 target, // Targeted balance for pricing\\n            bool isValid // is this token info valid\\n        );\\n\\n    function wooracle() external view returns (address);\\n\\n    function feeManager() external view returns (IWooFeeManager);\\n}\\n\\ninterface IWooracle {\\n    /// @dev returns the state for the given base token.\\n    /// @param base baseToken address\\n    /// @return priceNow the current price of base token\\n    /// @return spreadNow the current spread of base token\\n    /// @return coeffNow the slippage coefficient of base token\\n    /// @return feasible whether the current state is feasible and valid\\n    function state(address base)\\n        external\\n        view\\n        returns (\\n            uint256 priceNow,\\n            uint256 spreadNow,\\n            uint256 coeffNow,\\n            bool feasible\\n        );\\n\\n    /// @dev returns the last updated timestamp\\n    /// @return the last updated timestamp\\n    function timestamp() external view returns (uint256);\\n}\\n\\ninterface IWooGuardian {\\n    function refInfo(address)\\n        external\\n        view\\n        returns (\\n            address chainlinkRefOracle, // chainlink oracle for price checking\\n            uint96 refPriceFixCoeff // chainlink price fix coeff\\n        );\\n}\\n\\ninterface AggregatorV3Interface {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\\ninterface IWooFeeManager {\\n    function feeRate(address token) external view returns (uint256);\\n}\\n\\ninterface IWooState {\\n    struct Result {\\n        uint112 reserve; // Token balance\\n        uint64 R; // Rebalance coefficient [0; 1]\\n        uint112 target; // Targeted balance for pricing\\n        bool isValid; // is this token info valid\\n        uint256 p;\\n        uint256 s;\\n        uint256 k;\\n        bool isFeasible;\\n        uint256 lpFeeRate; // Fee rate: e.g. 0.001 = 0.1%\\n    }\\n\\n    function wooState(address woo, address token)\\n        external\\n        view\\n        returns (\\n            uint112 reserve, // Token balance\\n            uint64 R, // Rebalance coefficient [0, 1]\\n            uint112 target, // Targeted balance for pricing\\n            bool isValid, // is this token info valid\\n            uint256 p,\\n            uint256 s,\\n            uint256 k,\\n            bool isFeasible,\\n            uint256 lpFeeRate // Fee rate: e.g. 0.001 = 0.1%\\n        );\\n}\\n\",\"keccak256\":\"0xbce7ff893ae0401999e7e1e93149102d1b8f8d9c431fa1408bc5a6d552f0a6ae\",\"license\":\"MIT\"},\"contracts/state/BalancerV2State.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/state/IBalancerV2State.sol\\\";\\n\\nabstract contract BalancerV2State is IBalancerV2State {\\n    function balancerV2WeightedPoolState(\\n        address vault,\\n        bytes32 poolId,\\n        address pool\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 totalSupply,\\n            uint256[] memory weights,\\n            uint256 swapFee\\n        )\\n    {\\n        (tokens, balances, ) = IVault(vault).getPoolTokens(poolId);\\n        totalSupply = IERC20(pool).totalSupply();\\n        weights = IWeightedPool(pool).getNormalizedWeights();\\n        swapFee = IWeightedPool(pool).getSwapFeePercentage();\\n        return (tokens, balances, totalSupply, weights, swapFee);\\n    }\\n\\n    function balancerV2StablePoolState(\\n        address vault,\\n        bytes32 poolId,\\n        address pool\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 totalSupply,\\n            uint256 amp,\\n            uint256 swapFee\\n        )\\n    {\\n        (tokens, balances, ) = IVault(vault).getPoolTokens(poolId);\\n        totalSupply = IERC20(pool).totalSupply();\\n        (amp, , ) = IStablePool(pool).getAmplificationParameter();\\n        swapFee = IStablePool(pool).getSwapFeePercentage();\\n        return (tokens, balances, totalSupply, amp, swapFee);\\n    }\\n}\\n\",\"keccak256\":\"0x402965d78064f6cc6e14dfaecb7622959c1d78a0435e3c56d8233df0de8aeaed\",\"license\":\"MIT\"},\"contracts/state/CurveState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/state/ICurveState.sol\\\";\\n\\nabstract contract CurveState is ICurveState {\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    function curvePoolState(ICurveState.CurvePoolStateQuery memory query)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256[] memory balances,\\n            uint256[] memory underlying_balances,\\n            uint256[] memory rates,\\n            uint256 A,\\n            uint256 fee\\n        )\\n    {\\n        balances = new uint256[](8);\\n        for (uint256 i = 0; i < query.nCoins; i++) {\\n            balances[i] = query.version == 1 ? ICurvePoolV1(query.pool).balances(int128(i)) : ICurvePoolV2(query.pool).balances(i);\\n        }\\n\\n        rates = new uint256[](8);\\n        if (query.underlyingDecimals > 0) {\\n            address callee = query.rateCallee;\\n            bytes memory data = query.rateCalldata;\\n            address[] memory coins = new address[](query.nCoins);\\n            if (data.length > 0 && callee == address(0)) {\\n                for (uint256 i = 0; i < query.nCoins; i++) {\\n                    coins[i] = query.version == 1 ? ICurvePoolV1(query.pool).coins(int128(i)) : ICurvePoolV2(query.pool).coins(i);\\n                }\\n            }\\n            for (uint256 i = 0; i < query.nCoins; i++) {\\n                if (data.length == 0) {\\n                    rates[i] = 1e18;\\n                } else {\\n                    bytes memory result = (callee == address(0) ? coins[i] : callee).functionStaticCall(data);\\n                    rates[i] = abi.decode(result, (uint256));\\n                }\\n            }\\n        } else {\\n            for (uint256 i = 0; i < query.nCoins; i++) {\\n                rates[i] = 1e18;\\n            }\\n        }\\n\\n        underlying_balances = new uint256[](8);\\n        if (query.underlyingDecimals > 0) {\\n            for (uint256 i = 0; i < query.nCoins; i++) {\\n                uint256 decimal = (query.underlyingDecimals >> (8 * i)) % 256;\\n                underlying_balances[i] = balances[i].mul(rates[i]).div(10**decimal);\\n            }\\n        }\\n\\n        A = ICurvePool(query.pool).A();\\n        fee = ICurvePool(query.pool).fee();\\n\\n        return (balances, underlying_balances, rates, A, fee);\\n    }\\n}\\n\",\"keccak256\":\"0x26a60422342b60679a4075c97876794b5443b42739a023ad10d16996f94d457d\",\"license\":\"MIT\"},\"contracts/state/GambitState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/state/IGambitState.sol\\\";\\n\\nabstract contract GambitState is IGambitState {\\n    function gambitState(IGambitVault vault, address[] calldata tokens)\\n        external\\n        view\\n        override\\n        returns (\\n            bool inManagerMode,\\n            bool isSwapEnabled,\\n            uint256[] memory minPrices,\\n            uint256[] memory maxPrices,\\n            uint256 stableFlag,\\n            uint256[] memory usdgAmounts,\\n            uint256[] memory targetUsdgAmounts,\\n            IGambitState.GambitStateFee memory fee,\\n            uint256 whitelistFlag\\n        )\\n    {\\n        inManagerMode = vault.inManagerMode();\\n        isSwapEnabled = vault.isSwapEnabled();\\n        minPrices = new uint256[](tokens.length);\\n        maxPrices = new uint256[](tokens.length);\\n        stableFlag = 0;\\n        usdgAmounts = new uint256[](tokens.length);\\n        targetUsdgAmounts = new uint256[](tokens.length);\\n\\n        fee.stableSwapFeeBasisPoints = vault.stableSwapFeeBasisPoints();\\n        fee.swapFeeBasisPoints = vault.swapFeeBasisPoints();\\n        fee.stableTaxBasisPoints = vault.stableTaxBasisPoints();\\n        fee.taxBasisPoints = vault.taxBasisPoints();\\n        fee.mintBurnFeeBasisPoints = vault.mintBurnFeeBasisPoints();\\n        fee.hasDynamicFees = vault.hasDynamicFees();\\n\\n        whitelistFlag = 0;\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            minPrices[i] = vault.getMinPrice(tokens[i]);\\n            maxPrices[i] = vault.getMaxPrice(tokens[i]);\\n            if (vault.stableTokens(tokens[i])) {\\n                stableFlag = stableFlag | (1 << i);\\n            }\\n            usdgAmounts[i] = vault.usdgAmounts(tokens[i]);\\n            targetUsdgAmounts[i] = vault.getTargetUsdgAmount(tokens[i]);\\n            if (vault.whitelistedTokens(tokens[i])) {\\n                whitelistFlag = whitelistFlag | (1 << i);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x11ba5625db5e17abec0975552c50721ca2f972bc9a517fba72bf98c1d7c70b45\",\"license\":\"MIT\"},\"contracts/state/PlatypusState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../interfaces/state/IPlatypusState.sol\\\";\\n\\nabstract contract PlatypusState is IPlatypusState {\\n    function platypusPoolState(address pool)\\n        external\\n        view\\n        override\\n        returns (\\n            bool paused,\\n            uint256 c1,\\n            uint256 xThreshold,\\n            uint256 slippageParamK,\\n            uint256 slippageParamN,\\n            uint256 haircutRate,\\n            uint256 maxPriceDeviation\\n        )\\n    {\\n        paused = IPlatypusPool(pool).paused();\\n        c1 = IPlatypusPool(pool).getC1();\\n        xThreshold = IPlatypusPool(pool).getXThreshold();\\n        slippageParamK = IPlatypusPool(pool).getSlippageParamK();\\n        slippageParamN = IPlatypusPool(pool).getSlippageParamN();\\n        haircutRate = IPlatypusPool(pool).getHaircutRate();\\n        maxPriceDeviation = IPlatypusPool(pool).getMaxPriceDeviation();\\n\\n        return (paused, c1, xThreshold, slippageParamK, slippageParamN, haircutRate, maxPriceDeviation);\\n    }\\n\\n    function platypusAssetState(address pool, address token)\\n        external\\n        view\\n        override\\n        returns (\\n            uint8 decimals,\\n            uint256 price,\\n            uint256 cash,\\n            uint256 liability\\n        )\\n    {\\n        try IPlatypusPool(pool).assetOf(token) returns (address asset) {\\n            address oracle = IPlatypusPool(pool).getPriceOracle();\\n            decimals = IPlatypusAsset(asset).decimals();\\n            price = IPriceOracleGetter(oracle).getAssetPrice(token);\\n            cash = IPlatypusAsset(asset).cash();\\n            liability = IPlatypusAsset(asset).liability();\\n        } catch {\\n            decimals = 0;\\n            price = 0;\\n            cash = 0;\\n            liability = 0;\\n        }\\n        return (decimals, price, cash, liability);\\n    }\\n}\\n\",\"keccak256\":\"0x563b2bb88a44092060141c6a0c8dc36a2cfec77f7d9e68ef967a3ce428d0793a\",\"license\":\"MIT\"},\"contracts/state/SmoothyState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../interfaces/state/ISmoothyState.sol\\\";\\n\\nabstract contract SmoothyState is ISmoothyState {\\n    function smoothyV1State(address smoothyV1)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256[] memory tokenInfos,\\n            uint256[] memory tokenBalances,\\n            uint256 totalBalance,\\n            uint256 swapFee\\n        )\\n    {\\n        uint256 nTokens = ISmoothyV1(smoothyV1)._ntokens();\\n\\n        tokenInfos = new uint256[](nTokens);\\n        tokenBalances = new uint256[](nTokens);\\n        for (uint256 tid = 0; tid < nTokens; tid++) {\\n            tokenInfos[tid] = ISmoothyV1(smoothyV1)._tokenInfos(tid);\\n            tokenBalances[tid] = ISmoothyV1(smoothyV1).getBalance(tid);\\n        }\\n        totalBalance = ISmoothyV1(smoothyV1)._totalBalance();\\n        swapFee = ISmoothyV1(smoothyV1)._swapFee();\\n\\n        return (tokenInfos, tokenBalances, totalBalance, swapFee);\\n    }\\n}\\n\",\"keccak256\":\"0x68f873aac45007af0ea3c69d964190b76b8e23194438740dfa0780c44c1b554a\",\"license\":\"MIT\"},\"contracts/state/WooState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/state/IWooState.sol\\\";\\n\\nabstract contract WooState is IWooState {\\n    using SafeMath for uint256;\\n\\n    function wooState(address woo, address token)\\n        external\\n        view\\n        override\\n        returns (\\n            uint112, // Token balance\\n            uint64, // Rebalance coefficient [0, 1]\\n            uint112, // Targeted balance for pricing\\n            bool, // is this token info valid\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256 // Fee rate: e.g. 0.001 = 0.1%\\n        )\\n    {\\n        Result memory result;\\n\\n        (result.reserve, , , result.R, result.target, result.isValid) = IWooPP(woo).tokenInfo(token);\\n        result.lpFeeRate = IWooPP(woo).feeManager().feeRate(token);\\n        (result.p, result.s, result.k, result.isFeasible) = IWooracle(IWooPP(woo).wooracle()).state(token);\\n\\n        return (\\n            result.reserve,\\n            result.R,\\n            result.target,\\n            result.isValid,\\n            result.p,\\n            result.s,\\n            result.k,\\n            result.isFeasible,\\n            result.lpFeeRate\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x43df5816a12a471329448461580ba5e8081a5ee9ccd033f8cd78112e2e875e67\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612de8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063841ae84d1161005b578063841ae84d1461012957806393f7e6421461014d578063b7eb0fc114610173578063eb6534511461019b57610088565b80631001f9341461008d5780631a4350a9146100ba5780631e308cb3146100e257806343c4ac7314610106575b600080fd5b6100a061009b3660046126c5565b6101be565b6040516100b19594939291906129f2565b60405180910390f35b6100cd6100c8366004612644565b6107d4565b6040516100b199989796959493929190612a79565b6100f56100f03660046124e3565b611104565b6040516100b19594939291906129af565b6101196101143660046124ab565b6112fe565b6040516100b19493929190612cc3565b61013c6101373660046124e3565b6115e6565b6040516100b195949392919061295d565b61016061015b366004612473565b61179b565b6040516100b19796959493929190612b32565b6101866101813660046124ab565b611ad6565b6040516100b199989796959493929190612c6a565b6101ae6101a9366004612473565b611e27565b6040516100b19493929190612a40565b6040805160088082526101208201909252606091829182916000918291602082016101008036833701905050945060005b866020015160ff1681101561032e57866040015160ff16600114610291578651604051634903b0d160e01b81526001600160a01b0390911690634903b0d19061023c908490600401612b64565b60206040518083038186803b15801561025457600080fd5b505afa158015610268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028c9190612812565b61030f565b865160405162cb501b60e31b81526001600160a01b039091169063065a80d8906102bf908490600401612b6d565b60206040518083038186803b1580156102d757600080fd5b505afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f9190612812565b86828151811061031b57fe5b60209081029190910101526001016101ef565b5060408051600880825261012082019092529060208201610100803683375050506060870151909350156105e057608086015160a0870151602088015160609060ff166001600160401b038111801561038657600080fd5b506040519080825280602002602001820160405280156103b0578160200160208202803683370190505b509050600082511180156103cb57506001600160a01b038316155b156105225760005b896020015160ff1681101561052057896040015160ff1660011461047557895160405163c661065760e01b81526001600160a01b039091169063c661065790610420908490600401612b64565b60206040518083038186803b15801561043857600080fd5b505afa15801561044c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610470919061248f565b6104f4565b895160405163046e8dd760e31b81526001600160a01b03909116906323746eb8906104a4908490600401612b6d565b60206040518083038186803b1580156104bc57600080fd5b505afa1580156104d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f4919061248f565b82828151811061050057fe5b6001600160a01b03909216602092830291909101909101526001016103d3565b505b60005b896020015160ff168110156105d757825161056057670de0b6b3a764000087828151811061054f57fe5b6020026020010181815250506105cf565b606061059f846001600160a01b0387161561057b5786610590565b84848151811061058757fe5b60200260200101515b6001600160a01b031690612150565b9050808060200190518101906105b59190612812565b8883815181106105c157fe5b602002602001018181525050505b600101610525565b5050505061061c565b60005b866020015160ff1681101561061a57670de0b6b3a764000084828151811061060757fe5b60209081029190910101526001016105e3565b505b60408051600880825261012082019092529060208201610100803683375050506060870151909450156106dd5760005b866020015160ff168110156106db576000610100826008028960600151901c8161067257fe5b0690506106bb81600a0a6106b587858151811061068b57fe5b60200260200101518a868151811061069f57fe5b602002602001015161217e90919063ffffffff16565b906121c1565b8683815181106106c757fe5b60209081029190910101525060010161064c565b505b85600001516001600160a01b031663f446c1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561071a57600080fd5b505afa15801561072e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107529190612812565b915085600001516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561079157600080fd5b505afa1580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c99190612812565b905091939590929450565b60008060608060006060806107e76122d1565b60008b6001600160a01b0316639060b1ca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561082257600080fd5b505afa158015610836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085a9190612628565b98508b6001600160a01b031663351a964d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561089557600080fd5b505afa1580156108a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cd9190612628565b9750896001600160401b03811180156108e557600080fd5b5060405190808252806020026020018201604052801561090f578160200160208202803683370190505b509650896001600160401b038111801561092857600080fd5b50604051908082528060200260200182016040528015610952578160200160208202803683370190505b50955060009450896001600160401b038111801561096f57600080fd5b50604051908082528060200260200182016040528015610999578160200160208202803683370190505b509350896001600160401b03811180156109b257600080fd5b506040519080825280602002602001820160405280156109dc578160200160208202803683370190505b5092508b6001600160a01b031663df73a2676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1857600080fd5b505afa158015610a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a509190612812565b8260000181815250508b6001600160a01b031663a22f23926040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9257600080fd5b505afa158015610aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aca9190612812565b8260200181815250508b6001600160a01b03166310eb56c26040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0c57600080fd5b505afa158015610b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b449190612812565b8260400181815250508b6001600160a01b0316637a210a2b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8657600080fd5b505afa158015610b9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbe9190612812565b8260600181815250508b6001600160a01b0316634d47b3046040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0057600080fd5b505afa158015610c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c389190612812565b8260800181815250508b6001600160a01b0316639f392eb36040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7a57600080fd5b505afa158015610c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb29190612628565b151560a0830152506000805b8a8110156110f4578c6001600160a01b03166381a612d68d8d84818110610ce157fe5b9050602002016020810190610cf69190612473565b6040518263ffffffff1660e01b8152600401610d129190612949565b60206040518083038186803b158015610d2a57600080fd5b505afa158015610d3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d629190612812565b888281518110610d6e57fe5b6020026020010181815250508c6001600160a01b031663e124e6d28d8d84818110610d9557fe5b9050602002016020810190610daa9190612473565b6040518263ffffffff1660e01b8152600401610dc69190612949565b60206040518083038186803b158015610dde57600080fd5b505afa158015610df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e169190612812565b878281518110610e2257fe5b6020026020010181815250508c6001600160a01b03166342b60b038d8d84818110610e4957fe5b9050602002016020810190610e5e9190612473565b6040518263ffffffff1660e01b8152600401610e7a9190612949565b60206040518083038186803b158015610e9257600080fd5b505afa158015610ea6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eca9190612628565b15610ed957806001901b861795505b8c6001600160a01b0316631aa4ace58d8d84818110610ef457fe5b9050602002016020810190610f099190612473565b6040518263ffffffff1660e01b8152600401610f259190612949565b60206040518083038186803b158015610f3d57600080fd5b505afa158015610f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f759190612812565b858281518110610f8157fe5b6020026020010181815250508c6001600160a01b0316633a05dcc18d8d84818110610fa857fe5b9050602002016020810190610fbd9190612473565b6040518263ffffffff1660e01b8152600401610fd99190612949565b60206040518083038186803b158015610ff157600080fd5b505afa158015611005573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110299190612812565b84828151811061103557fe5b6020026020010181815250508c6001600160a01b031663daf9c2108d8d8481811061105c57fe5b90506020020160208101906110719190612473565b6040518263ffffffff1660e01b815260040161108d9190612949565b60206040518083038186803b1580156110a557600080fd5b505afa1580156110b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dd9190612628565b156110ec57806001901b821791505b600101610cbe565b5093979b92969a50939750939750565b6060806000806000876001600160a01b031663f94d4668886040518263ffffffff1660e01b81526004016111389190612b64565b60006040518083038186803b15801561115057600080fd5b505afa158015611164573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261118c9190810190612524565b508095508196505050856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111ce57600080fd5b505afa1580156111e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112069190612812565b9250856001600160a01b0316636daccffa6040518163ffffffff1660e01b815260040160606040518083038186803b15801561124157600080fd5b505afa158015611255573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611279919061282a565b90505080925050856001600160a01b03166355c676286040518163ffffffff1660e01b815260040160206040518083038186803b1580156112b957600080fd5b505afa1580156112cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f19190612812565b9050939792965093509350565b600080600080856001600160a01b03166371f96211866040518263ffffffff1660e01b81526004016113309190612949565b60206040518083038186803b15801561134857600080fd5b505afa925050508015611378575060408051601f3d908101601f191682019092526113759181019061248f565b60015b61138d575060009250829150819050806115dd565b6000876001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156113c857600080fd5b505afa1580156113dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611400919061248f565b9050816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561143b57600080fd5b505afa15801561144f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611473919061289f565b60405163b3596f0760e01b81529096506001600160a01b0382169063b3596f07906114a2908a90600401612949565b60206040518083038186803b1580156114ba57600080fd5b505afa1580156114ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f29190612812565b9450816001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b15801561152d57600080fd5b505afa158015611541573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115659190612812565b9350816001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b1580156115a057600080fd5b505afa1580156115b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d89190612812565b925050505b92959194509250565b606080600060606000876001600160a01b031663f94d4668886040518263ffffffff1660e01b815260040161161b9190612b64565b60006040518083038186803b15801561163357600080fd5b505afa158015611647573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261166f9190810190612524565b508095508196505050856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116b157600080fd5b505afa1580156116c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e99190612812565b9250856001600160a01b031663f89f27ed6040518163ffffffff1660e01b815260040160006040518083038186803b15801561172457600080fd5b505afa158015611738573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261176091908101906125ee565b9150856001600160a01b03166355c676286040518163ffffffff1660e01b815260040160206040518083038186803b1580156112b957600080fd5b6000806000806000806000876001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117df57600080fd5b505afa1580156117f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118179190612628565b9650876001600160a01b031663a76f54d26040518163ffffffff1660e01b815260040160206040518083038186803b15801561185257600080fd5b505afa158015611866573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188a9190612812565b9550876001600160a01b0316637a1c36d16040518163ffffffff1660e01b815260040160206040518083038186803b1580156118c557600080fd5b505afa1580156118d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fd9190612812565b9450876001600160a01b03166355af008a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561193857600080fd5b505afa15801561194c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119709190612812565b9350876001600160a01b0316637727c6556040518163ffffffff1660e01b815260040160206040518083038186803b1580156119ab57600080fd5b505afa1580156119bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e39190612812565b9250876001600160a01b0316637fdd5a8e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1e57600080fd5b505afa158015611a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a569190612812565b9150876001600160a01b031663ddcbc5166040518163ffffffff1660e01b815260040160206040518083038186803b158015611a9157600080fd5b505afa158015611aa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac99190612812565b9050919395979092949650565b6000806000806000806000806000611aec612309565b60405163f5dab71160e01b81526001600160a01b038d169063f5dab71190611b18908e90600401612949565b60c06040518083038186803b158015611b3057600080fd5b505afa158015611b44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b689190612783565b909192935090919250846000018560200186604001876060018415151515815250846001600160701b03166001600160701b0316815250846001600160401b03166001600160401b0316815250846001600160701b03166001600160701b0316815250505050508b6001600160a01b031663d0fb02036040518163ffffffff1660e01b815260040160206040518083038186803b158015611c0857600080fd5b505afa158015611c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c40919061248f565b6001600160a01b031663d0254a2c8c6040518263ffffffff1660e01b8152600401611c6b9190612949565b60206040518083038186803b158015611c8357600080fd5b505afa158015611c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbb9190612812565b816101000181815250508b6001600160a01b031663bc8530f96040518163ffffffff1660e01b815260040160206040518083038186803b158015611cfe57600080fd5b505afa158015611d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d36919061248f565b6001600160a01b03166331e658a58c6040518263ffffffff1660e01b8152600401611d619190612949565b60806040518083038186803b158015611d7957600080fd5b505afa158015611d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db1919061285f565b846080018560a0018660c0018760e001841515151581525084815250848152508481525050505050806000015181602001518260400151836060015184608001518560a001518660c001518760e00151886101000151995099509950995099509950995099509950509295985092959850929598565b6060806000806000856001600160a01b03166385c9f85e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e6857600080fd5b505afa158015611e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea09190612812565b9050806001600160401b0381118015611eb857600080fd5b50604051908082528060200260200182016040528015611ee2578160200160208202803683370190505b509450806001600160401b0381118015611efb57600080fd5b50604051908082528060200260200182016040528015611f25578160200160208202803683370190505b50935060005b8181101561206157604051638676192b60e01b81526001600160a01b03881690638676192b90611f5f908490600401612b64565b60206040518083038186803b158015611f7757600080fd5b505afa158015611f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611faf9190612812565b868281518110611fbb57fe5b6020908102919091010152604051631e01043960e01b81526001600160a01b03881690631e01043990611ff2908490600401612b64565b60206040518083038186803b15801561200a57600080fd5b505afa15801561201e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120429190612812565b85828151811061204e57fe5b6020908102919091010152600101611f2b565b50856001600160a01b031663252f7b496040518163ffffffff1660e01b815260040160206040518083038186803b15801561209b57600080fd5b505afa1580156120af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d39190612812565b9250856001600160a01b031663832781556040518163ffffffff1660e01b815260040160206040518083038186803b15801561210e57600080fd5b505afa158015612122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121469190612812565b9150509193509193565b60606121758383604051806060016040528060258152602001612d8e602591396121f3565b90505b92915050565b60008261218d57506000612178565b8282028284828161219a57fe5b04146121755760405162461bcd60e51b81526004016121b890612be5565b60405180910390fd5b60008082116121e25760405162461bcd60e51b81526004016121b890612bae565b8183816121eb57fe5b049392505050565b60606121fe84612292565b61221a5760405162461bcd60e51b81526004016121b890612c26565b60006060856001600160a01b031685604051612236919061292d565b600060405180830381855afa9150503d8060008114612271576040519150601f19603f3d011682016040523d82523d6000602084013e612276565b606091505b5091509150612286828286612298565b925050505b9392505050565b3b151590565b606083156122a757508161228b565b8251156122b75782518084602001fd5b8160405162461bcd60e51b81526004016121b89190612b7b565b6040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b803561217881612d58565b600082601f830112612370578081fd5b815161238361237e82612d09565b612ce3565b8181529150602080830190848101818402860182018710156123a457600080fd5b60005b848110156123c3578151845292820192908201906001016123a7565b505050505092915050565b8051801515811461217857600080fd5b600082601f8301126123ee578081fd5b81356001600160401b03811115612403578182fd5b612416601f8201601f1916602001612ce3565b915080825283602082850101111561242d57600080fd5b8060208401602084013760009082016020015292915050565b805161217881612d58565b80516001600160701b038116811461217857600080fd5b803561217881612d7e565b600060208284031215612484578081fd5b813561217581612d58565b6000602082840312156124a0578081fd5b815161217581612d58565b600080604083850312156124bd578081fd5b82356124c881612d58565b915060208301356124d881612d58565b809150509250929050565b6000806000606084860312156124f7578081fd5b833561250281612d58565b925060208401359150604084013561251981612d58565b809150509250925092565b600080600060608486031215612538578283fd5b83516001600160401b038082111561254e578485fd5b818601915086601f830112612561578485fd5b815161256f61237e82612d09565b80828252602080830192508086018b82838702890101111561258f57898afd5b8996505b848710156125b9576125a58c82612446565b845260019690960195928101928101612593565b5089015190975093505050808211156125d0578384fd5b506125dd86828701612360565b925050604084015190509250925092565b6000602082840312156125ff578081fd5b81516001600160401b03811115612614578182fd5b61262084828501612360565b949350505050565b600060208284031215612639578081fd5b815161217581612d70565b600080600060408486031215612658578081fd5b833561266381612d58565b925060208401356001600160401b038082111561267e578283fd5b818601915086601f830112612691578283fd5b81358181111561269f578384fd5b87602080830285010111156126b2578384fd5b6020830194508093505050509250925092565b6000602082840312156126d6578081fd5b81356001600160401b03808211156126ec578283fd5b9083019060c082860312156126ff578283fd5b61270960c0612ce3565b823561271481612d58565b8152602083013561272481612d7e565b60208201526127368660408501612468565b6040820152606083013560608201526127528660808501612355565b608082015260a083013582811115612768578485fd5b612774878286016123de565b60a08301525095945050505050565b60008060008060008060c0878903121561279b578384fd5b6127a58888612451565b95506127b48860208901612451565b9450604087015163ffffffff811681146127cc578485fd5b60608801519094506001600160401b03811681146127e8578283fd5b92506127f78860808901612451565b91506128068860a089016123ce565b90509295509295509295565b600060208284031215612823578081fd5b5051919050565b60008060006060848603121561283e578081fd5b8351925061284f85602086016123ce565b9150604084015190509250925092565b60008060008060808587031215612874578182fd5b845193506020850151925060408501519150606085015161289481612d70565b939692955090935050565b6000602082840312156128b0578081fd5b815161217581612d7e565b6000815180845260208085019450808401835b838110156128f35781516001600160a01b0316875295820195908201906001016128ce565b509495945050505050565b6000815180845260208085019450808401835b838110156128f357815187529582019590820190600101612911565b6000825161293f818460208701612d28565b9190910192915050565b6001600160a01b0391909116815260200190565b600060a0825261297060a08301886128bb565b828103602084015261298281886128fe565b9050856040840152828103606084015261299c81866128fe565b9150508260808301529695505050505050565b600060a082526129c260a08301886128bb565b82810360208401526129d481886128fe565b60408401969096525050606081019290925260809091015292915050565b600060a08252612a0560a08301886128fe565b8281036020840152612a1781886128fe565b90508281036040840152612a2b81876128fe565b60608401959095525050608001529392505050565b600060808252612a5360808301876128fe565b8281036020840152612a6581876128fe565b604084019590955250506060015292915050565b60006101c08b151583528a15156020840152806040840152612a9d8184018b6128fe565b90508281036060840152612ab1818a6128fe565b905087608084015282810360a0840152612acb81886128fe565b905082810360c0840152612adf81876128fe565b855160e0850152602086015161010085015260408601516101208501526060860151610140850152608086015161016085015260a090950151151561018084015250506101a00152979650505050505050565b9615158752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b90815260200190565b600f9190910b815260200190565b6000602082528251806020840152612b9a816040850160208701612d28565b601f01601f19169190910160400192915050565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526024908201527f416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e746040820152631c9858dd60e21b606082015260800190565b6001600160701b03998a1681526001600160401b039890981660208901529590971660408701529215156060860152608085019190915260a084015260c083015291151560e08201526101008101919091526101200190565b60ff94909416845260208401929092526040830152606082015260800190565b6040518181016001600160401b0381118282101715612d0157600080fd5b604052919050565b60006001600160401b03821115612d1e578081fd5b5060209081020190565b60005b83811015612d43578181015183820152602001612d2b565b83811115612d52576000848401525b50505050565b6001600160a01b0381168114612d6d57600080fd5b50565b8015158114612d6d57600080fd5b60ff81168114612d6d57600080fdfe416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564a2646970667358221220cd29e4ab58fe87f89be6b4e8624499e0131b5e97de2e08bdf36b7a98ae8b187464736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063841ae84d1161005b578063841ae84d1461012957806393f7e6421461014d578063b7eb0fc114610173578063eb6534511461019b57610088565b80631001f9341461008d5780631a4350a9146100ba5780631e308cb3146100e257806343c4ac7314610106575b600080fd5b6100a061009b3660046126c5565b6101be565b6040516100b19594939291906129f2565b60405180910390f35b6100cd6100c8366004612644565b6107d4565b6040516100b199989796959493929190612a79565b6100f56100f03660046124e3565b611104565b6040516100b19594939291906129af565b6101196101143660046124ab565b6112fe565b6040516100b19493929190612cc3565b61013c6101373660046124e3565b6115e6565b6040516100b195949392919061295d565b61016061015b366004612473565b61179b565b6040516100b19796959493929190612b32565b6101866101813660046124ab565b611ad6565b6040516100b199989796959493929190612c6a565b6101ae6101a9366004612473565b611e27565b6040516100b19493929190612a40565b6040805160088082526101208201909252606091829182916000918291602082016101008036833701905050945060005b866020015160ff1681101561032e57866040015160ff16600114610291578651604051634903b0d160e01b81526001600160a01b0390911690634903b0d19061023c908490600401612b64565b60206040518083038186803b15801561025457600080fd5b505afa158015610268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028c9190612812565b61030f565b865160405162cb501b60e31b81526001600160a01b039091169063065a80d8906102bf908490600401612b6d565b60206040518083038186803b1580156102d757600080fd5b505afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f9190612812565b86828151811061031b57fe5b60209081029190910101526001016101ef565b5060408051600880825261012082019092529060208201610100803683375050506060870151909350156105e057608086015160a0870151602088015160609060ff166001600160401b038111801561038657600080fd5b506040519080825280602002602001820160405280156103b0578160200160208202803683370190505b509050600082511180156103cb57506001600160a01b038316155b156105225760005b896020015160ff1681101561052057896040015160ff1660011461047557895160405163c661065760e01b81526001600160a01b039091169063c661065790610420908490600401612b64565b60206040518083038186803b15801561043857600080fd5b505afa15801561044c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610470919061248f565b6104f4565b895160405163046e8dd760e31b81526001600160a01b03909116906323746eb8906104a4908490600401612b6d565b60206040518083038186803b1580156104bc57600080fd5b505afa1580156104d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f4919061248f565b82828151811061050057fe5b6001600160a01b03909216602092830291909101909101526001016103d3565b505b60005b896020015160ff168110156105d757825161056057670de0b6b3a764000087828151811061054f57fe5b6020026020010181815250506105cf565b606061059f846001600160a01b0387161561057b5786610590565b84848151811061058757fe5b60200260200101515b6001600160a01b031690612150565b9050808060200190518101906105b59190612812565b8883815181106105c157fe5b602002602001018181525050505b600101610525565b5050505061061c565b60005b866020015160ff1681101561061a57670de0b6b3a764000084828151811061060757fe5b60209081029190910101526001016105e3565b505b60408051600880825261012082019092529060208201610100803683375050506060870151909450156106dd5760005b866020015160ff168110156106db576000610100826008028960600151901c8161067257fe5b0690506106bb81600a0a6106b587858151811061068b57fe5b60200260200101518a868151811061069f57fe5b602002602001015161217e90919063ffffffff16565b906121c1565b8683815181106106c757fe5b60209081029190910101525060010161064c565b505b85600001516001600160a01b031663f446c1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561071a57600080fd5b505afa15801561072e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107529190612812565b915085600001516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561079157600080fd5b505afa1580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c99190612812565b905091939590929450565b60008060608060006060806107e76122d1565b60008b6001600160a01b0316639060b1ca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561082257600080fd5b505afa158015610836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085a9190612628565b98508b6001600160a01b031663351a964d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561089557600080fd5b505afa1580156108a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cd9190612628565b9750896001600160401b03811180156108e557600080fd5b5060405190808252806020026020018201604052801561090f578160200160208202803683370190505b509650896001600160401b038111801561092857600080fd5b50604051908082528060200260200182016040528015610952578160200160208202803683370190505b50955060009450896001600160401b038111801561096f57600080fd5b50604051908082528060200260200182016040528015610999578160200160208202803683370190505b509350896001600160401b03811180156109b257600080fd5b506040519080825280602002602001820160405280156109dc578160200160208202803683370190505b5092508b6001600160a01b031663df73a2676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1857600080fd5b505afa158015610a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a509190612812565b8260000181815250508b6001600160a01b031663a22f23926040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9257600080fd5b505afa158015610aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aca9190612812565b8260200181815250508b6001600160a01b03166310eb56c26040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0c57600080fd5b505afa158015610b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b449190612812565b8260400181815250508b6001600160a01b0316637a210a2b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8657600080fd5b505afa158015610b9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbe9190612812565b8260600181815250508b6001600160a01b0316634d47b3046040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0057600080fd5b505afa158015610c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c389190612812565b8260800181815250508b6001600160a01b0316639f392eb36040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7a57600080fd5b505afa158015610c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb29190612628565b151560a0830152506000805b8a8110156110f4578c6001600160a01b03166381a612d68d8d84818110610ce157fe5b9050602002016020810190610cf69190612473565b6040518263ffffffff1660e01b8152600401610d129190612949565b60206040518083038186803b158015610d2a57600080fd5b505afa158015610d3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d629190612812565b888281518110610d6e57fe5b6020026020010181815250508c6001600160a01b031663e124e6d28d8d84818110610d9557fe5b9050602002016020810190610daa9190612473565b6040518263ffffffff1660e01b8152600401610dc69190612949565b60206040518083038186803b158015610dde57600080fd5b505afa158015610df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e169190612812565b878281518110610e2257fe5b6020026020010181815250508c6001600160a01b03166342b60b038d8d84818110610e4957fe5b9050602002016020810190610e5e9190612473565b6040518263ffffffff1660e01b8152600401610e7a9190612949565b60206040518083038186803b158015610e9257600080fd5b505afa158015610ea6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eca9190612628565b15610ed957806001901b861795505b8c6001600160a01b0316631aa4ace58d8d84818110610ef457fe5b9050602002016020810190610f099190612473565b6040518263ffffffff1660e01b8152600401610f259190612949565b60206040518083038186803b158015610f3d57600080fd5b505afa158015610f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f759190612812565b858281518110610f8157fe5b6020026020010181815250508c6001600160a01b0316633a05dcc18d8d84818110610fa857fe5b9050602002016020810190610fbd9190612473565b6040518263ffffffff1660e01b8152600401610fd99190612949565b60206040518083038186803b158015610ff157600080fd5b505afa158015611005573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110299190612812565b84828151811061103557fe5b6020026020010181815250508c6001600160a01b031663daf9c2108d8d8481811061105c57fe5b90506020020160208101906110719190612473565b6040518263ffffffff1660e01b815260040161108d9190612949565b60206040518083038186803b1580156110a557600080fd5b505afa1580156110b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dd9190612628565b156110ec57806001901b821791505b600101610cbe565b5093979b92969a50939750939750565b6060806000806000876001600160a01b031663f94d4668886040518263ffffffff1660e01b81526004016111389190612b64565b60006040518083038186803b15801561115057600080fd5b505afa158015611164573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261118c9190810190612524565b508095508196505050856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111ce57600080fd5b505afa1580156111e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112069190612812565b9250856001600160a01b0316636daccffa6040518163ffffffff1660e01b815260040160606040518083038186803b15801561124157600080fd5b505afa158015611255573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611279919061282a565b90505080925050856001600160a01b03166355c676286040518163ffffffff1660e01b815260040160206040518083038186803b1580156112b957600080fd5b505afa1580156112cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f19190612812565b9050939792965093509350565b600080600080856001600160a01b03166371f96211866040518263ffffffff1660e01b81526004016113309190612949565b60206040518083038186803b15801561134857600080fd5b505afa925050508015611378575060408051601f3d908101601f191682019092526113759181019061248f565b60015b61138d575060009250829150819050806115dd565b6000876001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156113c857600080fd5b505afa1580156113dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611400919061248f565b9050816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561143b57600080fd5b505afa15801561144f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611473919061289f565b60405163b3596f0760e01b81529096506001600160a01b0382169063b3596f07906114a2908a90600401612949565b60206040518083038186803b1580156114ba57600080fd5b505afa1580156114ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f29190612812565b9450816001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b15801561152d57600080fd5b505afa158015611541573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115659190612812565b9350816001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b1580156115a057600080fd5b505afa1580156115b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d89190612812565b925050505b92959194509250565b606080600060606000876001600160a01b031663f94d4668886040518263ffffffff1660e01b815260040161161b9190612b64565b60006040518083038186803b15801561163357600080fd5b505afa158015611647573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261166f9190810190612524565b508095508196505050856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116b157600080fd5b505afa1580156116c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e99190612812565b9250856001600160a01b031663f89f27ed6040518163ffffffff1660e01b815260040160006040518083038186803b15801561172457600080fd5b505afa158015611738573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261176091908101906125ee565b9150856001600160a01b03166355c676286040518163ffffffff1660e01b815260040160206040518083038186803b1580156112b957600080fd5b6000806000806000806000876001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117df57600080fd5b505afa1580156117f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118179190612628565b9650876001600160a01b031663a76f54d26040518163ffffffff1660e01b815260040160206040518083038186803b15801561185257600080fd5b505afa158015611866573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188a9190612812565b9550876001600160a01b0316637a1c36d16040518163ffffffff1660e01b815260040160206040518083038186803b1580156118c557600080fd5b505afa1580156118d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fd9190612812565b9450876001600160a01b03166355af008a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561193857600080fd5b505afa15801561194c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119709190612812565b9350876001600160a01b0316637727c6556040518163ffffffff1660e01b815260040160206040518083038186803b1580156119ab57600080fd5b505afa1580156119bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e39190612812565b9250876001600160a01b0316637fdd5a8e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1e57600080fd5b505afa158015611a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a569190612812565b9150876001600160a01b031663ddcbc5166040518163ffffffff1660e01b815260040160206040518083038186803b158015611a9157600080fd5b505afa158015611aa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac99190612812565b9050919395979092949650565b6000806000806000806000806000611aec612309565b60405163f5dab71160e01b81526001600160a01b038d169063f5dab71190611b18908e90600401612949565b60c06040518083038186803b158015611b3057600080fd5b505afa158015611b44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b689190612783565b909192935090919250846000018560200186604001876060018415151515815250846001600160701b03166001600160701b0316815250846001600160401b03166001600160401b0316815250846001600160701b03166001600160701b0316815250505050508b6001600160a01b031663d0fb02036040518163ffffffff1660e01b815260040160206040518083038186803b158015611c0857600080fd5b505afa158015611c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c40919061248f565b6001600160a01b031663d0254a2c8c6040518263ffffffff1660e01b8152600401611c6b9190612949565b60206040518083038186803b158015611c8357600080fd5b505afa158015611c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbb9190612812565b816101000181815250508b6001600160a01b031663bc8530f96040518163ffffffff1660e01b815260040160206040518083038186803b158015611cfe57600080fd5b505afa158015611d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d36919061248f565b6001600160a01b03166331e658a58c6040518263ffffffff1660e01b8152600401611d619190612949565b60806040518083038186803b158015611d7957600080fd5b505afa158015611d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db1919061285f565b846080018560a0018660c0018760e001841515151581525084815250848152508481525050505050806000015181602001518260400151836060015184608001518560a001518660c001518760e00151886101000151995099509950995099509950995099509950509295985092959850929598565b6060806000806000856001600160a01b03166385c9f85e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e6857600080fd5b505afa158015611e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea09190612812565b9050806001600160401b0381118015611eb857600080fd5b50604051908082528060200260200182016040528015611ee2578160200160208202803683370190505b509450806001600160401b0381118015611efb57600080fd5b50604051908082528060200260200182016040528015611f25578160200160208202803683370190505b50935060005b8181101561206157604051638676192b60e01b81526001600160a01b03881690638676192b90611f5f908490600401612b64565b60206040518083038186803b158015611f7757600080fd5b505afa158015611f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611faf9190612812565b868281518110611fbb57fe5b6020908102919091010152604051631e01043960e01b81526001600160a01b03881690631e01043990611ff2908490600401612b64565b60206040518083038186803b15801561200a57600080fd5b505afa15801561201e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120429190612812565b85828151811061204e57fe5b6020908102919091010152600101611f2b565b50856001600160a01b031663252f7b496040518163ffffffff1660e01b815260040160206040518083038186803b15801561209b57600080fd5b505afa1580156120af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d39190612812565b9250856001600160a01b031663832781556040518163ffffffff1660e01b815260040160206040518083038186803b15801561210e57600080fd5b505afa158015612122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121469190612812565b9150509193509193565b60606121758383604051806060016040528060258152602001612d8e602591396121f3565b90505b92915050565b60008261218d57506000612178565b8282028284828161219a57fe5b04146121755760405162461bcd60e51b81526004016121b890612be5565b60405180910390fd5b60008082116121e25760405162461bcd60e51b81526004016121b890612bae565b8183816121eb57fe5b049392505050565b60606121fe84612292565b61221a5760405162461bcd60e51b81526004016121b890612c26565b60006060856001600160a01b031685604051612236919061292d565b600060405180830381855afa9150503d8060008114612271576040519150601f19603f3d011682016040523d82523d6000602084013e612276565b606091505b5091509150612286828286612298565b925050505b9392505050565b3b151590565b606083156122a757508161228b565b8251156122b75782518084602001fd5b8160405162461bcd60e51b81526004016121b89190612b7b565b6040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b803561217881612d58565b600082601f830112612370578081fd5b815161238361237e82612d09565b612ce3565b8181529150602080830190848101818402860182018710156123a457600080fd5b60005b848110156123c3578151845292820192908201906001016123a7565b505050505092915050565b8051801515811461217857600080fd5b600082601f8301126123ee578081fd5b81356001600160401b03811115612403578182fd5b612416601f8201601f1916602001612ce3565b915080825283602082850101111561242d57600080fd5b8060208401602084013760009082016020015292915050565b805161217881612d58565b80516001600160701b038116811461217857600080fd5b803561217881612d7e565b600060208284031215612484578081fd5b813561217581612d58565b6000602082840312156124a0578081fd5b815161217581612d58565b600080604083850312156124bd578081fd5b82356124c881612d58565b915060208301356124d881612d58565b809150509250929050565b6000806000606084860312156124f7578081fd5b833561250281612d58565b925060208401359150604084013561251981612d58565b809150509250925092565b600080600060608486031215612538578283fd5b83516001600160401b038082111561254e578485fd5b818601915086601f830112612561578485fd5b815161256f61237e82612d09565b80828252602080830192508086018b82838702890101111561258f57898afd5b8996505b848710156125b9576125a58c82612446565b845260019690960195928101928101612593565b5089015190975093505050808211156125d0578384fd5b506125dd86828701612360565b925050604084015190509250925092565b6000602082840312156125ff578081fd5b81516001600160401b03811115612614578182fd5b61262084828501612360565b949350505050565b600060208284031215612639578081fd5b815161217581612d70565b600080600060408486031215612658578081fd5b833561266381612d58565b925060208401356001600160401b038082111561267e578283fd5b818601915086601f830112612691578283fd5b81358181111561269f578384fd5b87602080830285010111156126b2578384fd5b6020830194508093505050509250925092565b6000602082840312156126d6578081fd5b81356001600160401b03808211156126ec578283fd5b9083019060c082860312156126ff578283fd5b61270960c0612ce3565b823561271481612d58565b8152602083013561272481612d7e565b60208201526127368660408501612468565b6040820152606083013560608201526127528660808501612355565b608082015260a083013582811115612768578485fd5b612774878286016123de565b60a08301525095945050505050565b60008060008060008060c0878903121561279b578384fd5b6127a58888612451565b95506127b48860208901612451565b9450604087015163ffffffff811681146127cc578485fd5b60608801519094506001600160401b03811681146127e8578283fd5b92506127f78860808901612451565b91506128068860a089016123ce565b90509295509295509295565b600060208284031215612823578081fd5b5051919050565b60008060006060848603121561283e578081fd5b8351925061284f85602086016123ce565b9150604084015190509250925092565b60008060008060808587031215612874578182fd5b845193506020850151925060408501519150606085015161289481612d70565b939692955090935050565b6000602082840312156128b0578081fd5b815161217581612d7e565b6000815180845260208085019450808401835b838110156128f35781516001600160a01b0316875295820195908201906001016128ce565b509495945050505050565b6000815180845260208085019450808401835b838110156128f357815187529582019590820190600101612911565b6000825161293f818460208701612d28565b9190910192915050565b6001600160a01b0391909116815260200190565b600060a0825261297060a08301886128bb565b828103602084015261298281886128fe565b9050856040840152828103606084015261299c81866128fe565b9150508260808301529695505050505050565b600060a082526129c260a08301886128bb565b82810360208401526129d481886128fe565b60408401969096525050606081019290925260809091015292915050565b600060a08252612a0560a08301886128fe565b8281036020840152612a1781886128fe565b90508281036040840152612a2b81876128fe565b60608401959095525050608001529392505050565b600060808252612a5360808301876128fe565b8281036020840152612a6581876128fe565b604084019590955250506060015292915050565b60006101c08b151583528a15156020840152806040840152612a9d8184018b6128fe565b90508281036060840152612ab1818a6128fe565b905087608084015282810360a0840152612acb81886128fe565b905082810360c0840152612adf81876128fe565b855160e0850152602086015161010085015260408601516101208501526060860151610140850152608086015161016085015260a090950151151561018084015250506101a00152979650505050505050565b9615158752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b90815260200190565b600f9190910b815260200190565b6000602082528251806020840152612b9a816040850160208701612d28565b601f01601f19169190910160400192915050565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526024908201527f416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e746040820152631c9858dd60e21b606082015260800190565b6001600160701b03998a1681526001600160401b039890981660208901529590971660408701529215156060860152608085019190915260a084015260c083015291151560e08201526101008101919091526101200190565b60ff94909416845260208401929092526040830152606082015260800190565b6040518181016001600160401b0381118282101715612d0157600080fd5b604052919050565b60006001600160401b03821115612d1e578081fd5b5060209081020190565b60005b83811015612d43578181015183820152602001612d2b565b83811115612d52576000848401525b50505050565b6001600160a01b0381168114612d6d57600080fd5b50565b8015158114612d6d57600080fd5b60ff81168114612d6d57600080fdfe416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564a2646970667358221220cd29e4ab58fe87f89be6b4e8624499e0131b5e97de2e08bdf36b7a98ae8b187464736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}