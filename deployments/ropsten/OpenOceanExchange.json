{
  "address": "0x1F3e20f2346fA744fCCD2A35eC109AAD2A1f5210",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "dstToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dstReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spentAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minReturnAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "guaranteedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReturn",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "name": "callUniswap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOpenOceanCaller",
          "name": "caller",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "srcToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "dstToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "srcReceiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dstReceiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "guaranteedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "flags",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            }
          ],
          "internalType": "struct OpenOceanExchange.SwapDescription",
          "name": "desc",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IOpenOceanCaller.CallDescription[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0c0e9bcae6594a288c498e93982c9c35fab6e0963d85c417724bcdcaba8336a4",
  "receipt": {
    "to": null,
    "from": "0x5bDCE812ce8409442ac3FBbd10565F9B17A6C49D",
    "contractAddress": "0x1F3e20f2346fA744fCCD2A35eC109AAD2A1f5210",
    "transactionIndex": 3,
    "gasUsed": "1834541",
    "logsBloom": "0x
    "blockHash": "0x3490bd1d8f45e06a31c34ffed503ed3b06d6415b2d63f71bbd296c3a7d19c9d4",
    "transactionHash": "0x0c0e9bcae6594a288c498e93982c9c35fab6e0963d85c417724bcdcaba8336a4",
    "logs": [],
    "blockNumber": 11264236,
    "cumulativeGasUsed": "1921679",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5f5bf32605b6614949169d10e7fb366d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"guaranteedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"name\":\"callUniswap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOpenOceanCaller\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"struct OpenOceanExchange.SwapDescription\",\"name\":\"desc\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IOpenOceanCaller.CallDescription[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenOceanExchange.sol\":\"OpenOceanExchange\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x73bef0a5dec3efde8183c4858d90f683ed2771656c4329647b4d5b0f89498fd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/OpenOceanExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IERC20Permit.sol\\\";\\nimport \\\"./interfaces/IOpenOceanCaller.sol\\\";\\nimport \\\"./libraries/RevertReasonParser.sol\\\";\\nimport \\\"./libraries/UniversalERC20.sol\\\";\\nimport \\\"./UniswapV2Exchange.sol\\\";\\n\\ncontract OpenOceanExchange is OwnableUpgradeable, PausableUpgradeable, UniswapV2Exchange {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using UniversalERC20 for IERC20;\\n\\n    uint256 private constant _PARTIAL_FILL = 0x01;\\n    uint256 private constant _SHOULD_CLAIM = 0x02;\\n\\n    struct SwapDescription {\\n        IERC20 srcToken;\\n        IERC20 dstToken;\\n        address srcReceiver;\\n        address dstReceiver;\\n        uint256 amount;\\n        uint256 minReturnAmount;\\n        uint256 guaranteedAmount;\\n        uint256 flags;\\n        address referrer;\\n        bytes permit;\\n    }\\n\\n    event Swapped(\\n        address indexed sender,\\n        IERC20 indexed srcToken,\\n        IERC20 indexed dstToken,\\n        address dstReceiver,\\n        uint256 amount,\\n        uint256 spentAmount,\\n        uint256 returnAmount,\\n        uint256 minReturnAmount,\\n        uint256 guaranteedAmount,\\n        address referrer\\n    );\\n\\n    function initialize() public initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        PausableUpgradeable.__Pausable_init();\\n    }\\n\\n    function swap(\\n        IOpenOceanCaller caller,\\n        SwapDescription calldata desc,\\n        IOpenOceanCaller.CallDescription[] calldata calls\\n    ) external payable whenNotPaused returns (uint256 returnAmount) {\\n        require(desc.minReturnAmount > 0, \\\"Min return should not be 0\\\");\\n        require(calls.length > 0, \\\"Call data should exist\\\");\\n\\n        uint256 flags = desc.flags;\\n        IERC20 srcToken = desc.srcToken;\\n        IERC20 dstToken = desc.dstToken;\\n\\n        require(msg.value == (srcToken.isETH() ? desc.amount : 0), \\\"Invalid msg.value\\\");\\n\\n        if (flags & _SHOULD_CLAIM != 0) {\\n            require(!srcToken.isETH(), \\\"Claim token is ETH\\\");\\n            _claim(srcToken, desc.srcReceiver, desc.amount, desc.permit);\\n        }\\n\\n        address dstReceiver = (desc.dstReceiver == address(0)) ? msg.sender : desc.dstReceiver;\\n        uint256 initialSrcBalance = (flags & _PARTIAL_FILL != 0) ? srcToken.universalBalanceOf(msg.sender) : 0;\\n        uint256 initialDstBalance = dstToken.universalBalanceOf(dstReceiver);\\n\\n        caller.makeCalls{value: msg.value}(calls);\\n\\n        uint256 spentAmount = desc.amount;\\n        returnAmount = dstToken.universalBalanceOf(dstReceiver).sub(initialDstBalance);\\n\\n        if (flags & _PARTIAL_FILL != 0) {\\n            spentAmount = initialSrcBalance.add(desc.amount).sub(srcToken.universalBalanceOf(msg.sender));\\n            require(returnAmount.mul(desc.amount) >= desc.minReturnAmount.mul(spentAmount), \\\"Return amount is not enough\\\");\\n        } else {\\n            require(returnAmount >= desc.minReturnAmount, \\\"Return amount is not enough\\\");\\n        }\\n\\n        _emitSwapped(desc, srcToken, dstToken, dstReceiver, spentAmount, returnAmount);\\n    }\\n\\n    function _emitSwapped(\\n        SwapDescription calldata desc,\\n        IERC20 srcToken,\\n        IERC20 dstToken,\\n        address dstReceiver,\\n        uint256 spentAmount,\\n        uint256 returnAmount\\n    ) private {\\n        emit Swapped(\\n            msg.sender,\\n            srcToken,\\n            dstToken,\\n            dstReceiver,\\n            desc.amount,\\n            spentAmount,\\n            returnAmount,\\n            desc.minReturnAmount,\\n            desc.guaranteedAmount,\\n            desc.referrer\\n        );\\n    }\\n\\n    function _claim(\\n        IERC20 token,\\n        address dst,\\n        uint256 amount,\\n        bytes calldata permit\\n    ) private {\\n        // TODO: Is it safe to call permit on tokens without implemented permit? Fallback will be called. Is it bad for proxies?\\n\\n        if (permit.length == 32 * 7) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, bytes memory result) = address(token).call(abi.encodeWithSelector(IERC20Permit.permit.selector, permit));\\n            if (!success) {\\n                revert(RevertReasonParser.parse(result, \\\"Permit call failed: \\\"));\\n            }\\n        }\\n\\n        token.safeTransferFrom(msg.sender, dst, amount);\\n    }\\n\\n    function rescueFunds(IERC20 token, uint256 amount) external onlyOwner {\\n        token.universalTransfer(msg.sender, amount);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n}\\n\",\"keccak256\":\"0x9e9940dd00a86f7edc3d11783f66cdf1ce5111e8c56e0c620bf77e7a13e4223d\",\"license\":\"MIT\"},\"contracts/UniswapV2Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract UniswapV2Exchange {\\n    uint256 private constant TRANSFER_FROM_CALL_SELECTOR_32 = 0x23b872dd00000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant WETH_DEPOSIT_CALL_SELECTOR_32 = 0xd0e30db000000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant WETH_WITHDRAW_CALL_SELECTOR_32 = 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant ERC20_TRANSFER_CALL_SELECTOR_32 = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\\n    uint256 private constant REVERSE_MASK = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant WETH_MASK = 0x4000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant NUMERATOR_MASK = 0x0000000000000000ffffffff0000000000000000000000000000000000000000;\\n    uint256 private constant WETH = 0x000000000000000000000000c778417E063141139Fce010982780140Aa0cD5Ab;\\n    uint256 private constant UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32 =\\n        0x0902f1ac00000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant UNISWAP_PAIR_SWAP_CALL_SELECTOR_32 =\\n        0x022c0d9f00000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant DENOMINATOR = 1000000000;\\n    uint256 private constant NUMERATOR_OFFSET = 160;\\n\\n    receive() external payable {\\n        // cannot directly send eth to this contract\\n        require(msg.sender != tx.origin);\\n    }\\n\\n    function callUniswap(\\n        IERC20 srcToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        bytes32[] calldata /* pools */\\n    ) public payable returns (uint256 returnAmount) {\\n        assembly {\\n            // solhint-disable-line no-inline-assembly\\n            function reRevert() {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n\\n            function revertWithReason(m, len) {\\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n                mstore(0x20, 0x0000002000000000000000000000000000000000000000000000000000000000)\\n                mstore(0x40, m)\\n                revert(0, len)\\n            }\\n\\n            function swap(emptyPtr, swapAmount, pair, reversed, numerator, dst) -> ret {\\n                mstore(emptyPtr, UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32)\\n                if iszero(staticcall(gas(), pair, emptyPtr, 0x4, emptyPtr, 0x40)) {\\n                    reRevert()\\n                }\\n\\n                let reserve0 := mload(emptyPtr)\\n                let reserve1 := mload(add(emptyPtr, 0x20))\\n                if reversed {\\n                    let tmp := reserve0\\n                    reserve0 := reserve1\\n                    reserve1 := tmp\\n                }\\n                ret := mul(swapAmount, numerator)\\n                ret := div(mul(ret, reserve1), add(ret, mul(reserve0, DENOMINATOR)))\\n\\n                mstore(emptyPtr, UNISWAP_PAIR_SWAP_CALL_SELECTOR_32)\\n                switch reversed\\n                case 0 {\\n                    mstore(add(emptyPtr, 0x04), 0)\\n                    mstore(add(emptyPtr, 0x24), ret)\\n                }\\n                default {\\n                    mstore(add(emptyPtr, 0x04), ret)\\n                    mstore(add(emptyPtr, 0x24), 0)\\n                }\\n                mstore(add(emptyPtr, 0x44), dst)\\n                mstore(add(emptyPtr, 0x64), 0x80)\\n                mstore(add(emptyPtr, 0x84), 0)\\n                if iszero(call(gas(), pair, 0, emptyPtr, 0xa4, 0, 0)) {\\n                    reRevert()\\n                }\\n            }\\n\\n            let emptyPtr := mload(0x40)\\n            mstore(0x40, add(emptyPtr, 0xc0))\\n\\n            let poolsOffset := add(calldataload(0x64), 0x4)\\n            let poolsEndOffset := calldataload(poolsOffset)\\n            poolsOffset := add(poolsOffset, 0x20)\\n            poolsEndOffset := add(poolsOffset, mul(0x20, poolsEndOffset))\\n            let rawPair := calldataload(poolsOffset)\\n            switch srcToken\\n            case 0 {\\n                if iszero(eq(amount, callvalue())) {\\n                    revertWithReason(0x00000011696e76616c6964206d73672e76616c75650000000000000000000000, 0x55) // \\\"invalid msg.value\\\"\\n                }\\n\\n                mstore(emptyPtr, WETH_DEPOSIT_CALL_SELECTOR_32)\\n                if iszero(call(gas(), WETH, amount, emptyPtr, 0x4, 0, 0)) {\\n                    reRevert()\\n                }\\n\\n                mstore(emptyPtr, ERC20_TRANSFER_CALL_SELECTOR_32)\\n                mstore(add(emptyPtr, 0x4), and(rawPair, ADDRESS_MASK))\\n                mstore(add(emptyPtr, 0x24), amount)\\n                if iszero(call(gas(), WETH, 0, emptyPtr, 0x44, 0, 0)) {\\n                    reRevert()\\n                }\\n            }\\n            default {\\n                if callvalue() {\\n                    revertWithReason(0x00000011696e76616c6964206d73672e76616c75650000000000000000000000, 0x55) // \\\"invalid msg.value\\\"\\n                }\\n\\n                mstore(emptyPtr, TRANSFER_FROM_CALL_SELECTOR_32)\\n                mstore(add(emptyPtr, 0x4), caller())\\n                mstore(add(emptyPtr, 0x24), and(rawPair, ADDRESS_MASK))\\n                mstore(add(emptyPtr, 0x44), amount)\\n                if iszero(call(gas(), srcToken, 0, emptyPtr, 0x64, 0, 0)) {\\n                    reRevert()\\n                }\\n            }\\n\\n            returnAmount := amount\\n\\n            for {\\n                let i := add(poolsOffset, 0x20)\\n            } lt(i, poolsEndOffset) {\\n                i := add(i, 0x20)\\n            } {\\n                let nextRawPair := calldataload(i)\\n\\n                returnAmount := swap(\\n                    emptyPtr,\\n                    returnAmount,\\n                    and(rawPair, ADDRESS_MASK),\\n                    and(rawPair, REVERSE_MASK),\\n                    shr(NUMERATOR_OFFSET, and(rawPair, NUMERATOR_MASK)),\\n                    and(nextRawPair, ADDRESS_MASK)\\n                )\\n\\n                rawPair := nextRawPair\\n            }\\n\\n            switch and(rawPair, WETH_MASK)\\n            case 0 {\\n                returnAmount := swap(\\n                    emptyPtr,\\n                    returnAmount,\\n                    and(rawPair, ADDRESS_MASK),\\n                    and(rawPair, REVERSE_MASK),\\n                    shr(NUMERATOR_OFFSET, and(rawPair, NUMERATOR_MASK)),\\n                    caller()\\n                )\\n            }\\n            default {\\n                returnAmount := swap(\\n                    emptyPtr,\\n                    returnAmount,\\n                    and(rawPair, ADDRESS_MASK),\\n                    and(rawPair, REVERSE_MASK),\\n                    shr(NUMERATOR_OFFSET, and(rawPair, NUMERATOR_MASK)),\\n                    address()\\n                )\\n\\n                mstore(emptyPtr, WETH_WITHDRAW_CALL_SELECTOR_32)\\n                mstore(add(emptyPtr, 0x04), returnAmount)\\n                if iszero(call(gas(), WETH, 0, emptyPtr, 0x24, 0, 0)) {\\n                    reRevert()\\n                }\\n\\n                if iszero(call(gas(), caller(), returnAmount, 0, 0, 0, 0)) {\\n                    reRevert()\\n                }\\n            }\\n\\n            if lt(returnAmount, minReturn) {\\n                revertWithReason(0x000000164d696e2072657475726e206e6f742072656163686564000000000000, 0x5a) // \\\"Min return not reached\\\"\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc5f77fa44282a725f6128c89e24d01154302a649ee2fe31480e539306645267c\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IERC20Permit {\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5629e25a326e3afa5748c98591b174faaedbe161dce2b6bb5eb63bd72682c646\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenOceanCaller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IOpenOceanCaller {\\n    struct CallDescription {\\n        uint256 target;\\n        uint256 gasLimit;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    function makeCall(CallDescription memory desc) external;\\n\\n    function makeCalls(CallDescription[] memory desc) external payable;\\n}\\n\",\"keccak256\":\"0x483ecce79f7da86d233776e9d3f993a58c683e8f37aac0241953ea7c221c78de\",\"license\":\"MIT\"},\"contracts/libraries/RevertReasonParser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary RevertReasonParser {\\n    function parse(bytes memory data, string memory prefix) internal pure returns (string memory) {\\n        // https://solidity.readthedocs.io/en/latest/control-structures.html#revert\\n        // We assume that revert reason is abi-encoded as Error(string)\\n\\n        // 68 = 4-byte selector 0x08c379a0 + 32 bytes offset + 32 bytes length\\n        if (data.length >= 68 && data[0] == \\\"\\\\x08\\\" && data[1] == \\\"\\\\xc3\\\" && data[2] == \\\"\\\\x79\\\" && data[3] == \\\"\\\\xa0\\\") {\\n            string memory reason;\\n            // solhint-disable no-inline-assembly\\n            assembly {\\n                // 68 = 32 bytes data length + 4-byte selector + 32 bytes offset\\n                reason := add(data, 68)\\n            }\\n            /*\\n                revert reason is padded up to 32 bytes with ABI encoder: Error(string)\\n                also sometimes there is extra 32 bytes of zeros padded in the end:\\n                https://github.com/ethereum/solidity/issues/10170\\n                because of that we can't check for equality and instead check\\n                that string length + extra 68 bytes is less than overall data length\\n            */\\n            require(data.length >= 68 + bytes(reason).length, \\\"Invalid revert reason\\\");\\n            return string(abi.encodePacked(prefix, \\\"Error(\\\", reason, \\\")\\\"));\\n        }\\n        // 36 = 4-byte selector 0x4e487b71 + 32 bytes integer\\n        else if (data.length == 36 && data[0] == \\\"\\\\x4e\\\" && data[1] == \\\"\\\\x48\\\" && data[2] == \\\"\\\\x7b\\\" && data[3] == \\\"\\\\x71\\\") {\\n            uint256 code;\\n            // solhint-disable no-inline-assembly\\n            assembly {\\n                // 36 = 32 bytes data length + 4-byte selector\\n                code := mload(add(data, 36))\\n            }\\n            return string(abi.encodePacked(prefix, \\\"Panic(\\\", _toHex(code), \\\")\\\"));\\n        }\\n\\n        return string(abi.encodePacked(prefix, \\\"Unknown()\\\"));\\n    }\\n\\n    function _toHex(uint256 value) private pure returns(string memory) {\\n        return _toHex(abi.encodePacked(value));\\n    }\\n\\n    function _toHex(bytes memory data) private pure returns(string memory) {\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < data.length; i++) {\\n            str[2 * i + 2] = alphabet[uint8(data[i] >> 4)];\\n            str[2 * i + 3] = alphabet[uint8(data[i] & 0x0f)];\\n        }\\n        return string(str);\\n    }\\n}\\n\",\"keccak256\":\"0x6fb2a97b985b6ba852d9ff91880e4adf3bf0b2de8f0e4cfcc8ad61254ba384b7\",\"license\":\"MIT\"},\"contracts/libraries/UniversalERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nlibrary UniversalERC20 {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 internal constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\\n    IERC20 internal constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n    IERC20 internal constant MATIC_ADDRESS = IERC20(0x0000000000000000000000000000000000001010);\\n\\n    function universalTransfer(\\n        IERC20 token,\\n        address payable to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > 0) {\\n            if (isETH(token)) {\\n                to.transfer(amount);\\n            } else {\\n                token.safeTransfer(to, amount);\\n            }\\n        }\\n    }\\n\\n    function universalApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        require(!isETH(token), \\\"Approve called on ETH\\\");\\n\\n        if (amount == 0) {\\n            token.safeApprove(to, 0);\\n        } else {\\n            uint256 allowance = token.allowance(address(this), to);\\n            if (allowance < amount) {\\n                if (allowance > 0) {\\n                    token.safeApprove(to, 0);\\n                }\\n                token.safeApprove(to, amount);\\n            }\\n        }\\n    }\\n\\n    function universalBalanceOf(IERC20 token, address account) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return account.balance;\\n        } else {\\n            return token.balanceOf(account);\\n        }\\n    }\\n\\n    function isETH(IERC20 token) internal pure returns (bool) {\\n        return\\n            address(token) == address(ETH_ADDRESS) ||\\n            address(token) == address(MATIC_ADDRESS) ||\\n            address(token) == address(ZERO_ADDRESS);\\n    }\\n}\\n\",\"keccak256\":\"0xde2d7c52ef4c4b3922d8d488203f3a7de16780b0d1106697c08026a4104eeb1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80638456cb59116100595780638456cb59146101185780638980041a1461012d5780638da5cb5b1461014d57806390411a321461016f578063f2fde38b146101825761009e565b80635c975abb146100a3578063715018a6146100ce57806378e3214f146100e35780638129fc1c146101035761009e565b3661009e573332141561009c57600080fd5b005b600080fd5b3480156100af57600080fd5b506100b86101a2565b6040516100c59190611b5a565b60405180910390f35b3480156100da57600080fd5b5061009c6101ab565b3480156100ef57600080fd5b5061009c6100fe366004611803565b61023d565b34801561010f57600080fd5b5061009c610294565b34801561012457600080fd5b5061009c610327565b61014061013b36600461182e565b610370565b6040516100c59190611a23565b34801561015957600080fd5b506101626106c7565b6040516100c59190611a2c565b61014061017d366004611896565b6106d6565b34801561018e57600080fd5b5061009c61019d3660046117c7565b6109b9565b60655460ff1690565b6101b3610a7a565b6001600160a01b03166101c46106c7565b6001600160a01b0316146101f35760405162461bcd60e51b81526004016101ea90611e24565b60405180910390fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b610245610a7a565b6001600160a01b03166102566106c7565b6001600160a01b03161461027c5760405162461bcd60e51b81526004016101ea90611e24565b6102906001600160a01b0383163383610a7e565b5050565b600054610100900460ff16806102ad57506102ad610ae7565b806102bb575060005460ff16155b6102d75760405162461bcd60e51b81526004016101ea90611d27565b600054610100900460ff16158015610302576000805460ff1961ff0019909116610100171660011790555b61030a610af8565b610312610b76565b8015610324576000805461ff00191690555b50565b61032f610a7a565b6001600160a01b03166103406106c7565b6001600160a01b0316146103665760405162461bcd60e51b81526004016101ea90611e24565b61036e610bf4565b565b6000610446565b3d6000803e3d6000fd5b62461bcd60e51b600052600160e51b60205280604052816000fd5b6000630240bc6b60e21b8252604082600484875afa6103bd576103bd610377565b8151602083015186156103cc57905b63022c0d9f60e01b8452878502633b9aca0092909202820191020490508480156104025781600484015260006024840152610410565b600060048401528160248401525b50866044830152608060648301526000608483015260008060a4846000885af161043c5761043c610377565b9695505050505050565b60405160c0810160405260046064350180356020820191508060200282019050813589600081146104d85734156104975761049760557111696e76616c6964206d73672e76616c756560581b610381565b6323b872dd60e01b85523360048601526001600160a01b038216602486015289604486015260008060648760008f5af16104d3576104d3610377565b61057d565b348a146104ff576104ff60557111696e76616c6964206d73672e76616c756560581b610381565b630d0e30db60e41b85526000806004878d73c778417e063141139fce010982780140aa0cd5ab5af161053357610533610377565b63a9059cbb60e01b85526001600160a01b0382166004860152896024860152600080604487600073c778417e063141139fce010982780140aa0cd5ab5af161057d5761057d610377565b50889450602083015b828110156105ce5780356105c26001600160a01b03821663ffffffff60a01b851660a01c600160ff1b86166001600160a01b0387168b8b61039c565b96509150602001610586565b50600160fe1b8116801561065d576106053063ffffffff60a01b841660a01c600160ff1b85166001600160a01b0386168a8a61039c565b9550632e1a7d4d60e01b8552856004860152600080602487600073c778417e063141139fce010982780140aa0cd5ab5af161064257610642610377565b60008060008089335af161065857610658610377565b610689565b6106863363ffffffff60a01b841660a01c600160ff1b85166001600160a01b0386168a8a61039c565b95505b5050505050838110156106be576106be605a7c164d696e2072657475726e206e6f742072656163686564000000000000610381565b95945050505050565b6033546001600160a01b031690565b60006106e06101a2565b156106fd5760405162461bcd60e51b81526004016101ea90611cfd565b60008460a00135116107215760405162461bcd60e51b81526004016101ea90611dac565b8161073e5760405162461bcd60e51b81526004016101ea90611f09565b60e0840135600061075260208701876117c7565b9050600061076660408801602089016117c7565b905061077a826001600160a01b0316610c66565b61078557600061078b565b86608001355b34146107a95760405162461bcd60e51b81526004016101ea90611c55565b600283161561080d576107c4826001600160a01b0316610c66565b156107e15760405162461bcd60e51b81526004016101ea90611bac565b61080d826107f560608a0160408b016117c7565b60808a01356108086101208c018c611f39565b610cb5565b60008061082060808a0160608b016117c7565b6001600160a01b0316146108435761083e6080890160608a016117c7565b610845565b335b905060006001851661085857600061086b565b61086b6001600160a01b03851633610ddf565b905060006108826001600160a01b03851684610ddf565b90508a6001600160a01b031663a8920d2b348b8b6040518463ffffffff1660e01b81526004016108b3929190611aba565b6000604051808303818588803b1580156108cc57600080fd5b505af11580156108e0573d6000803e3d6000fd5b5050505060808b01359050610908826109026001600160a01b03881687610ddf565b90610e83565b97506001871615610978576109376109296001600160a01b03881633610ddf565b6109028560808f0135610eab565b905061094760a08c013582610ed0565b6109558960808e0135610ed0565b10156109735760405162461bcd60e51b81526004016101ea90611d75565b61099c565b8a60a0013588101561099c5760405162461bcd60e51b81526004016101ea90611d75565b6109aa8b878787858d610f0a565b50505050505050949350505050565b6109c1610a7a565b6001600160a01b03166109d26106c7565b6001600160a01b0316146109f85760405162461bcd60e51b81526004016101ea90611e24565b6001600160a01b038116610a1e5760405162461bcd60e51b81526004016101ea90611bd8565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b8015610ae257610a8d83610c66565b15610ace576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015610ac8573d6000803e3d6000fd5b50610ae2565b610ae26001600160a01b0384168383610f92565b505050565b6000610af230610fe8565b15905090565b600054610100900460ff1680610b115750610b11610ae7565b80610b1f575060005460ff16155b610b3b5760405162461bcd60e51b81526004016101ea90611d27565b600054610100900460ff16158015610b66576000805460ff1961ff0019909116610100171660011790555b610b6e610fee565b61031261106f565b600054610100900460ff1680610b8f5750610b8f610ae7565b80610b9d575060005460ff16155b610bb95760405162461bcd60e51b81526004016101ea90611d27565b600054610100900460ff16158015610be4576000805460ff1961ff0019909116610100171660011790555b610bec610fee565b610312611149565b610bfc6101a2565b15610c195760405162461bcd60e51b81526004016101ea90611cfd565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610c4f610a7a565b604051610c5c9190611a2c565b60405180910390a1565b60006001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1480610c9d57506001600160a01b038216611010145b80610caf57506001600160a01b038216155b92915050565b60e0811415610dc35760006060866001600160a01b031663d505accf60e01b8585604051602401610ce7929190611b65565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610d259190611956565b6000604051808303816000865af19150503d8060008114610d62576040519150601f19603f3d011682016040523d82523d6000602084013e610d67565b606091505b509150915081610dc057610da7816040518060400160405280601481526020017302832b936b4ba1031b0b636103330b4b632b21d160651b8152506111d5565b60405162461bcd60e51b81526004016101ea9190611b79565b50505b610dd86001600160a01b0386163386866113e3565b5050505050565b6000610dea83610c66565b15610e0057506001600160a01b03811631610caf565b6040516370a0823160e01b81526001600160a01b038416906370a0823190610e2c908590600401611a2c565b60206040518083038186803b158015610e4457600080fd5b505afa158015610e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7c9190611914565b9392505050565b600082821115610ea55760405162461bcd60e51b81526004016101ea90611c80565b50900390565b600082820183811015610e7c5760405162461bcd60e51b81526004016101ea90611c1e565b600082610edf57506000610caf565b82820282848281610eec57fe5b0414610e7c5760405162461bcd60e51b81526004016101ea90611de3565b836001600160a01b0316856001600160a01b0316336001600160a01b03167f76af224a143865a50b41496e1a73622698692c565c1214bc862f18e22d829c5e868a6080013587878d60a001358e60c001358f610100016020810190610f6f91906117c7565b604051610f829796959493929190611a7d565b60405180910390a4505050505050565b610ae28363a9059cbb60e01b8484604051602401610fb1929190611a64565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261140a565b3b151590565b600054610100900460ff16806110075750611007610ae7565b80611015575060005460ff16155b6110315760405162461bcd60e51b81526004016101ea90611d27565b600054610100900460ff16158015610312576000805460ff1961ff0019909116610100171660011790558015610324576000805461ff001916905550565b600054610100900460ff16806110885750611088610ae7565b80611096575060005460ff16155b6110b25760405162461bcd60e51b81526004016101ea90611d27565b600054610100900460ff161580156110dd576000805460ff1961ff0019909116610100171660011790555b60006110e7610a7a565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610324576000805461ff001916905550565b600054610100900460ff16806111625750611162610ae7565b80611170575060005460ff16155b61118c5760405162461bcd60e51b81526004016101ea90611d27565b600054610100900460ff161580156111b7576000805460ff1961ff0019909116610100171660011790555b6065805460ff191690558015610324576000805461ff001916905550565b606060448351101580156112085750826000815181106111f157fe5b6020910101516001600160f81b031916600160fb1b145b801561123357508260018151811061121c57fe5b6020910101516001600160f81b03191660c360f81b145b801561125e57508260028151811061124757fe5b6020910101516001600160f81b031916607960f81b145b801561128957508260038151811061127257fe5b6020910101516001600160f81b031916600560fd1b145b156112e55760606044840190508051604401845110156112bb5760405162461bcd60e51b81526004016101ea90611e59565b82816040516020016112ce9291906119ee565b604051602081830303815290604052915050610caf565b825160241480156113155750826000815181106112fe57fe5b6020910101516001600160f81b031916602760f91b145b801561134057508260018151811061132957fe5b6020910101516001600160f81b031916600960fb1b145b801561136b57508260028151811061135457fe5b6020910101516001600160f81b031916607b60f81b145b801561139657508260038151811061137f57fe5b6020910101516001600160f81b031916607160f81b145b156113bb576024830151826113aa82611499565b6040516020016112ce92919061199f565b816040516020016113cc9190611972565b604051602081830303815290604052905092915050565b611404846323b872dd60e01b858585604051602401610fb193929190611a40565b50505050565b606061145f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114c39092919063ffffffff16565b805190915015610ae2578080602001905181019061147d91906117e3565b610ae25760405162461bcd60e51b81526004016101ea90611ebf565b6060610caf826040516020016114af9190611a23565b6040516020818303038152906040526114da565b60606114d28484600085611684565b949350505050565b6060806040518060400160405280601081526020016f181899199a1a9b1b9c1cb0b131b232b360811b81525090506060835160020260020167ffffffffffffffff8111801561152857600080fd5b506040519080825280601f01601f191660200182016040528015611553576020820181803683370190505b509050600360fc1b8160008151811061156857fe5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061159157fe5b60200101906001600160f81b031916908160001a90535060005b845181101561167c578260048683815181106115c357fe5b016020015182516001600160f81b031990911690911c60f81c9081106115e557fe5b602001015160f81c60f81b82826002026002018151811061160257fe5b60200101906001600160f81b031916908160001a9053508285828151811061162657fe5b602091010151815160f89190911c600f1690811061164057fe5b602001015160f81c60f81b82826002026003018151811061165d57fe5b60200101906001600160f81b031916908160001a9053506001016115ab565b509392505050565b6060824710156116a65760405162461bcd60e51b81526004016101ea90611cb7565b6116af85610fe8565b6116cb5760405162461bcd60e51b81526004016101ea90611e88565b60006060866001600160a01b031685876040516116e89190611956565b60006040518083038185875af1925050503d8060008114611725576040519150601f19603f3d011682016040523d82523d6000602084013e61172a565b606091505b509150915061173a828286611745565b979650505050505050565b60608315611754575081610e7c565b8251156117645782518084602001fd5b8160405162461bcd60e51b81526004016101ea9190611b79565b60008083601f84011261178f578182fd5b50813567ffffffffffffffff8111156117a6578182fd5b60208301915083602080830285010111156117c057600080fd5b9250929050565b6000602082840312156117d8578081fd5b8135610e7c81611fef565b6000602082840312156117f4578081fd5b81518015158114610e7c578182fd5b60008060408385031215611815578081fd5b823561182081611fef565b946020939093013593505050565b600080600080600060808688031215611845578081fd5b853561185081611fef565b94506020860135935060408601359250606086013567ffffffffffffffff811115611879578182fd5b6118858882890161177e565b969995985093965092949392505050565b600080600080606085870312156118ab578384fd5b84356118b681611fef565b9350602085013567ffffffffffffffff808211156118d2578485fd5b9086019061014082890312156118e6578485fd5b909350604086013590808211156118fb578384fd5b506119088782880161177e565b95989497509550505050565b600060208284031215611925578081fd5b5051919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251611968818460208701611fc3565b9190910192915050565b60008251611984818460208701611fc3565b68556e6b6e6f776e282960b81b920191825250600901919050565b600083516119b1818460208801611fc3565b650a0c2dcd2c6560d31b90830190815283516119d4816006840160208801611fc3565b602960f81b60069290910191820152600701949350505050565b60008351611a00818460208801611fc3565b6508ae4e4dee4560d31b90830190815283516119d4816006840160208801611fc3565b90815260200190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039788168152602081019690965260408601949094526060850192909252608084015260a083015290911660c082015260e00190565b602080825281810183905260009060408084018583028501820187855b88811015611b4c57878303603f190184528135368b9003607e19018112611afc578788fd5b8a01803584528681013587850152858101358685015260806060611b2281840184611f7e565b93508282880152611b36838801858361192c565b978a019796505050928701925050600101611ad7565b509098975050505050505050565b901515815260200190565b6000602082526114d260208301848661192c565b6000602082528251806020840152611b98816040850160208701611fc3565b601f01601f19169190910160400192915050565b602080825260129082015271086d8c2d2da40e8ded6cadc40d2e6408aa8960731b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b602080825260119082015270496e76616c6964206d73672e76616c756560781b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601b908201527f52657475726e20616d6f756e74206973206e6f7420656e6f7567680000000000604082015260600190565b6020808252601a908201527f4d696e2072657475726e2073686f756c64206e6f742062652030000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526015908201527424b73b30b634b2103932bb32b93a103932b0b9b7b760591b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526016908201527510d85b1b0819185d18481cda1bdd5b1908195e1a5cdd60521b604082015260600190565b6000808335601e19843603018112611f4f578283fd5b83018035915067ffffffffffffffff821115611f69578283fd5b6020019150368190038213156117c057600080fd5b6000808335601e19843603018112611f94578283fd5b830160208101925035905067ffffffffffffffff811115611fb457600080fd5b8036038313156117c057600080fd5b60005b83811015611fde578181015183820152602001611fc6565b838111156114045750506000910152565b6001600160a01b038116811461032457600080fdfea2646970667358221220792a8ba583cc342c04d24d0743e1498766b87b46985160cdd3e53401ecf434df64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 137,
        "contract": "contracts/OpenOceanExchange.sol:OpenOceanExchange",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 140,
        "contract": "contracts/OpenOceanExchange.sol:OpenOceanExchange",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 484,
        "contract": "contracts/OpenOceanExchange.sol:OpenOceanExchange",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/OpenOceanExchange.sol:OpenOceanExchange",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/OpenOceanExchange.sol:OpenOceanExchange",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 506,
        "contract": "contracts/OpenOceanExchange.sol:OpenOceanExchange",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 597,
        "contract": "contracts/OpenOceanExchange.sol:OpenOceanExchange",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}