{
  "language": "Solidity",
  "sources": {
    "contracts/callers/DistributionCaller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../interfaces/IDistributionCaller.sol\";\nimport \"../libraries/CallDescriptions.sol\";\nimport \"../libraries/UniversalERC20.sol\";\n\nabstract contract DistributionCaller is IDistributionCaller {\n    using CallDescriptions for IOpenOceanCaller.CallDescription;\n    using UniversalERC20 for IERC20;\n    using SafeMath for uint256;\n\n    function singleDistributionCall(\n        IERC20 token,\n        uint256 distribution,\n        IOpenOceanCaller.CallDescription memory desc,\n        uint256 amountBias\n    ) external override {\n        uint256 balance = token.universalBalanceOf(address(this));\n        (uint128 numerator, uint128 denominator) = getDistribution(distribution);\n        uint256 amount = balance.mul(numerator).div(denominator);\n        require(amount > 0, \"OpenOcean: Insufficient token balance\");\n\n        if (token.isETH() && desc.target != 0) {\n            desc.value = amount;\n        }\n        if (amountBias > 0) {\n            desc.encodeAmount(amount, amountBias);\n        }\n        (bool success, string memory errorMessage) = desc.execute();\n        if (!success) {\n            revert(errorMessage);\n        }\n    }\n\n    function multiDistributionCall(\n        IERC20 token,\n        uint256 distribution,\n        IOpenOceanCaller.CallDescription[] memory descs,\n        uint256[] memory amountBiases\n    ) external override {\n        require(descs.length == amountBiases.length, \"OpenOcean: Invalid call parameters\");\n\n        uint256 balance = token.universalBalanceOf(address(this));\n        require(balance > 0, \"OpenOcean: Insufficient token balance\");\n        (uint128 numerator, uint128 denominator) = getDistribution(distribution);\n        uint256 amount = balance.mul(numerator).div(denominator);\n\n        for (uint256 i = 0; i < descs.length; i++) {\n            if (token.isETH() && descs[i].target != 0) {\n                descs[i].value = amount;\n            }\n            if (amountBiases[i] > 0) {\n                descs[i].encodeAmount(amount, amountBiases[i]);\n            }\n            (bool success, string memory errorMessage) = descs[i].execute();\n            if (!success) {\n                revert(errorMessage);\n            }\n        }\n    }\n\n    function getDistribution(uint256 distribution) private pure returns (uint128, uint128) {\n        uint128 numerator = uint128(distribution >> 128);\n        uint128 denominator = uint128(distribution);\n        require(numerator > 0 && denominator > 0, \"OpenOcean: Invalid call parameters\");\n        return (numerator, denominator);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/interfaces/IDistributionCaller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IOpenOceanCaller.sol\";\n\ninterface IDistributionCaller {\n    function singleDistributionCall(\n        IERC20 token,\n        uint256 distribution,\n        IOpenOceanCaller.CallDescription memory desc,\n        uint256 amountBias\n    ) external;\n\n    function multiDistributionCall(\n        IERC20 token,\n        uint256 distribution,\n        IOpenOceanCaller.CallDescription[] memory descs,\n        uint256[] memory amountBiases\n    ) external;\n}\n"
    },
    "contracts/libraries/CallDescriptions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/IOpenOceanCaller.sol\";\nimport \"./RevertReasonParser.sol\";\n\nlibrary CallDescriptions {\n    function execute(IOpenOceanCaller.CallDescription memory desc) internal returns (bool, string memory) {\n        require(!isTransferFrom(desc.data), \"OpenOcean: Not allowed\");\n        address target = address(desc.target);\n        if (target == address(0)) {\n            target = address(this);\n        }\n        require(target.balance >= desc.value, \"OpenOcean: Insufficient balance for external call\");\n        bool success;\n        bytes memory returnData;\n        if (desc.gasLimit > 0) {\n            (success, returnData) = target.call{value: desc.value, gas: desc.gasLimit}(desc.data);\n        } else {\n            (success, returnData) = target.call{value: desc.value}(desc.data);\n        }\n        return (success, RevertReasonParser.parse(returnData, \"OpenOcean external call failed: \"));\n    }\n\n    function encodeAmount(\n        IOpenOceanCaller.CallDescription memory desc,\n        uint256 amount,\n        uint256 bias\n    ) internal pure {\n        bytes memory amountToEncode = abi.encode(amount);\n        bytes memory data = desc.data;\n        assembly {\n            mstore(add(add(data, 32), bias), mload(add(amountToEncode, 32)))\n        }\n    }\n\n    function isTransferFrom(bytes memory data) internal pure returns (bool) {\n        // ERC20.transferFrom(address sender, address recipient, uint256 amount)\n        // data.length = 4 + 32 + 32 + 32\n        return data.length == 100 && data[0] == \"\\x23\" && data[1] == \"\\xb8\" && data[2] == \"\\x72\" && data[3] == \"\\xdd\";\n    }\n}\n"
    },
    "contracts/libraries/UniversalERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nlibrary UniversalERC20 {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 internal constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\n    IERC20 internal constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    IERC20 internal constant MATIC_ADDRESS = IERC20(0x0000000000000000000000000000000000001010);\n\n    function universalTransfer(\n        IERC20 token,\n        address payable to,\n        uint256 amount\n    ) internal {\n        if (amount > 0) {\n            if (isETH(token)) {\n                to.transfer(amount);\n            } else {\n                token.safeTransfer(to, amount);\n            }\n        }\n    }\n\n    function universalApprove(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        require(!isETH(token), \"Approve called on ETH\");\n\n        if (amount == 0) {\n            token.safeApprove(to, 0);\n        } else {\n            uint256 allowance = token.allowance(address(this), to);\n            if (allowance < amount) {\n                if (allowance > 0) {\n                    token.safeApprove(to, 0);\n                }\n                token.safeApprove(to, amount);\n            }\n        }\n    }\n\n    function universalBalanceOf(IERC20 token, address account) internal view returns (uint256) {\n        if (isETH(token)) {\n            return account.balance;\n        } else {\n            return token.balanceOf(account);\n        }\n    }\n\n    function isETH(IERC20 token) internal pure returns (bool) {\n        return\n            address(token) == address(ETH_ADDRESS) ||\n            address(token) == address(MATIC_ADDRESS) ||\n            address(token) == address(ZERO_ADDRESS);\n    }\n}\n"
    },
    "contracts/interfaces/IOpenOceanCaller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface IOpenOceanCaller {\n    struct CallDescription {\n        uint256 target;\n        uint256 gasLimit;\n        uint256 value;\n        bytes data;\n    }\n\n    function makeCall(CallDescription memory desc) external;\n\n    function makeCalls(CallDescription[] memory desc) external payable;\n}\n"
    },
    "contracts/libraries/RevertReasonParser.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nlibrary RevertReasonParser {\n    function parse(bytes memory data, string memory prefix) internal pure returns (string memory) {\n        // https://solidity.readthedocs.io/en/latest/control-structures.html#revert\n        // We assume that revert reason is abi-encoded as Error(string)\n\n        // 68 = 4-byte selector 0x08c379a0 + 32 bytes offset + 32 bytes length\n        if (data.length >= 68 && data[0] == \"\\x08\" && data[1] == \"\\xc3\" && data[2] == \"\\x79\" && data[3] == \"\\xa0\") {\n            string memory reason;\n            // solhint-disable no-inline-assembly\n            assembly {\n                // 68 = 32 bytes data length + 4-byte selector + 32 bytes offset\n                reason := add(data, 68)\n            }\n            /*\n                revert reason is padded up to 32 bytes with ABI encoder: Error(string)\n                also sometimes there is extra 32 bytes of zeros padded in the end:\n                https://github.com/ethereum/solidity/issues/10170\n                because of that we can't check for equality and instead check\n                that string length + extra 68 bytes is less than overall data length\n            */\n            require(data.length >= 68 + bytes(reason).length, \"Invalid revert reason\");\n            return string(abi.encodePacked(prefix, \"Error(\", reason, \")\"));\n        }\n        // 36 = 4-byte selector 0x4e487b71 + 32 bytes integer\n        else if (data.length == 36 && data[0] == \"\\x4e\" && data[1] == \"\\x48\" && data[2] == \"\\x7b\" && data[3] == \"\\x71\") {\n            uint256 code;\n            // solhint-disable no-inline-assembly\n            assembly {\n                // 36 = 32 bytes data length + 4-byte selector\n                code := mload(add(data, 36))\n            }\n            return string(abi.encodePacked(prefix, \"Panic(\", _toHex(code), \")\"));\n        }\n\n        return string(abi.encodePacked(prefix, \"Unknown()\"));\n    }\n\n    function _toHex(uint256 value) private pure returns(string memory) {\n        return _toHex(abi.encodePacked(value));\n    }\n\n    function _toHex(bytes memory data) private pure returns(string memory) {\n        bytes memory alphabet = \"0123456789abcdef\";\n        bytes memory str = new bytes(2 + data.length * 2);\n        str[0] = \"0\";\n        str[1] = \"x\";\n        for (uint256 i = 0; i < data.length; i++) {\n            str[2 * i + 2] = alphabet[uint8(data[i] >> 4)];\n            str[2 * i + 3] = alphabet[uint8(data[i] & 0x0f)];\n        }\n        return string(str);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/OpenOceanCaller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IOpenOceanCaller.sol\";\nimport \"./callers/DistributionCaller.sol\";\nimport \"./callers/SafeERC20Extension.sol\";\nimport \"./callers/UniswapCaller.sol\";\nimport \"./callers/DMMCaller.sol\";\nimport \"./libraries/CallDescriptions.sol\";\n\ncontract OpenOceanCaller is\n    IOpenOceanCaller,\n    DistributionCaller,\n    SafeERC20Extension,\n    UniswapV2LikeCaller,\n    UniswapV3Caller,\n    DMMCaller\n{\n    using CallDescriptions for CallDescription;\n\n    receive() external payable {\n        // cannot directly send eth to this contract\n        require(msg.sender != tx.origin);\n    }\n\n    function makeCall(CallDescription memory desc) external override {\n        (bool success, string memory errorMessage) = desc.execute();\n        if (!success) {\n            revert(errorMessage);\n        }\n    }\n\n    function makeCalls(CallDescription[] memory desc) external payable override {\n        require(desc.length > 0, \"OpenOcean: Invalid call parameter\");\n        for (uint256 i = 0; i < desc.length; i++) {\n            this.makeCall(desc[i]);\n        }\n    }\n}\n"
    },
    "contracts/callers/SafeERC20Extension.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/ISafeERC20Extension.sol\";\nimport \"../libraries/UniversalERC20.sol\";\n\nabstract contract SafeERC20Extension is ISafeERC20Extension {\n    using UniversalERC20 for IERC20;\n\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 amount\n    ) external override {\n        token.universalApprove(spender, amount);\n    }\n\n    function safeTransfer(\n        IERC20 token,\n        address payable target,\n        uint256 amount\n    ) external override {\n        token.universalTransfer(target, amount);\n    }\n}\n"
    },
    "contracts/callers/UniswapCaller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../interfaces/IUniswapCaller.sol\";\nimport \"../libraries/PoolAddress.sol\";\n\nabstract contract UniswapV2LikeCaller is IUniswapV2LikeCaller {\n    using SafeMath for uint256;\n\n    uint256 private constant ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\n    uint256 private constant REVERSE_MASK = 0x8000000000000000000000000000000000000000000000000000000000000000;\n    uint256 private constant NO_CALLDATA_MASK = 0x2000000000000000000000000000000000000000000000000000000000000000;\n    uint256 private constant NUMERATOR_MASK = 0x0000000000000000ffffffff0000000000000000000000000000000000000000;\n    uint256 private constant DENOMINATOR = 1000000000;\n    uint256 private constant NUMERATOR_OFFSET = 160;\n\n    function uniswapV2Swap(\n        uint256 pool,\n        address srcToken,\n        address receiver\n    ) external override {\n        address pair = address(pool & ADDRESS_MASK);\n        bool reverse = (pool & REVERSE_MASK) != 0;\n\n        uint256 inReserve;\n        uint256 outReserve;\n        {\n            // avoid stack too deep error\n            (uint112 reserve0, uint112 reserve1, ) = IUniswapV2Pair(pair).getReserves();\n            (inReserve, outReserve) = reverse ? (reserve1, reserve0) : (reserve0, reserve1);\n        }\n\n        uint256 inAmount = IERC20(srcToken).balanceOf(pair).sub(inReserve);\n        uint256 outAmount = calculateOutAmount(inReserve, outReserve, inAmount, (pool & NUMERATOR_MASK) >> NUMERATOR_OFFSET);\n\n        (uint256 amount0Out, uint256 amount1Out) = reverse ? (outAmount, uint256(0)) : (uint256(0), outAmount);\n        if ((pool & NO_CALLDATA_MASK) == 0) {\n            IUniswapV2Pair(pair).swap(amount0Out, amount1Out, receiver, new bytes(0));\n        } else {\n            IUniswapV2NoCalldataPair(pair).swap(amount0Out, amount1Out, receiver);\n        }\n    }\n\n    function calculateOutAmount(\n        uint256 inReserve,\n        uint256 outReserve,\n        uint256 amount,\n        uint256 feeNumerator\n    ) private pure returns (uint256) {\n        uint256 inAmountWithFee = amount.mul(feeNumerator);\n        uint256 numerator = inAmountWithFee.mul(outReserve);\n        uint256 denominator = inReserve.mul(DENOMINATOR).add(inAmountWithFee);\n        return (denominator == 0) ? 0 : numerator.div(denominator);\n    }\n}\n\nabstract contract UniswapV3Caller is IUniswapV3Caller {\n    using SafeERC20 for IERC20;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 private constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 private constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata callback\n    ) external override {\n        require(amount0Delta > 0 || amount1Delta > 0, \"UniswapV3: DELTA\");\n        IUniswapV3Caller.SwapCallbackData memory data = abi.decode(callback, (IUniswapV3Caller.SwapCallbackData));\n\n        (address tokenIn, address tokenOut, uint24 fee) = PoolAddress.decodePool(data.path);\n        address pool = PoolAddress.computeAddress(PoolAddress.getPoolKey(tokenIn, tokenOut, fee));\n        require(msg.sender == pool, \"OpenOcean: Access Denied\");\n\n        (bool isExactInput, uint256 amountToPay) = amount0Delta > 0\n            ? (tokenIn < tokenOut, uint256(amount0Delta))\n            : (tokenOut < tokenIn, uint256(amount1Delta));\n        require(isExactInput && amountToPay == data.amount, \"UniswapV3: TIA\");\n\n        IERC20(tokenIn).safeTransfer(msg.sender, amountToPay);\n    }\n\n    function uniswapV3Swap(\n        address pool,\n        bool zeroForOne,\n        int256 amount,\n        address recipient,\n        bytes calldata path\n    ) external override {\n        uint160 sqrtPriceLimitX96 = zeroForOne ? MIN_SQRT_RATIO + 1 : MAX_SQRT_RATIO - 1;\n        IUniswapV3Caller.SwapCallbackData memory data = IUniswapV3Caller.SwapCallbackData({path: path, amount: uint256(amount)});\n        IUniswapV3Pool(pool).swap(recipient, zeroForOne, amount, sqrtPriceLimitX96, abi.encode(data));\n    }\n}\n"
    },
    "contracts/callers/DMMCaller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../interfaces/IDMMCaller.sol\";\n\nabstract contract DMMCaller is IDMMCaller {\n    using SafeMath for uint256;\n\n    uint256 private constant PRECISION = 1e18;\n\n    function dmmSwap(\n        address pool,\n        IERC20 from,\n        IERC20 to,\n        address target\n    ) external override {\n        bool reverse = from > to;\n\n        (uint112 reserve0, uint112 reserve1, uint112 vReserve0, uint112 vReserve1, uint256 feeInPrecision) = IDMMPool(pool)\n            .getTradeInfo();\n        (reserve0, reserve1) = reverse ? (reserve1, reserve0) : (reserve0, reserve1);\n        (vReserve0, vReserve1) = reverse ? (vReserve1, vReserve0) : (vReserve0, vReserve1);\n        uint256 inAmount = from.balanceOf(pool).sub(reserve0);\n        uint256 outAmount = calculateDmmOutAmount(vReserve0, vReserve1, inAmount, feeInPrecision);\n\n        (uint256 amount0Out, uint256 amount1Out) = reverse ? (outAmount, uint256(0)) : (uint256(0), outAmount);\n        IDMMPool(pool).swap(amount0Out, amount1Out, target, new bytes(0));\n    }\n\n    function calculateDmmOutAmount(\n        uint256 vReserveIn,\n        uint256 vReserveOut,\n        uint256 amount,\n        uint256 feeInPrecision\n    ) private pure returns (uint256) {\n        uint256 amountInWithFee = amount.mul(PRECISION.sub(feeInPrecision)).div(PRECISION);\n        uint256 numerator = amountInWithFee.mul(vReserveOut);\n        uint256 denominator = vReserveIn.add(amountInWithFee);\n        return (denominator == 0) ? 0 : numerator.div(denominator);\n    }\n}\n"
    },
    "contracts/interfaces/ISafeERC20Extension.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ISafeERC20Extension {\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 amount\n    ) external;\n\n    function safeTransfer(\n        IERC20 token,\n        address payable target,\n        uint256 amount\n    ) external;\n}\n"
    },
    "contracts/interfaces/IUniswapCaller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @notice Uniswap V2 pair pool interface. See https://uniswap.org/docs/v2/smart-contracts/pair/\n */\ninterface IUniswapV2Pair {\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n}\n\ninterface IUniswapV2NoCalldataPair {\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to\n    ) external;\n}\n\ninterface IUniswapV2LikeCaller {\n    function uniswapV2Swap(\n        uint256 pool,\n        address srcToken,\n        address receiver\n    ) external;\n}\n\n// V3\ninterface IUniswapV3Pool {\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n}\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n\ninterface IUniswapV3Caller is IUniswapV3SwapCallback {\n    struct SwapCallbackData {\n        bytes path;\n        uint256 amount;\n    }\n\n    function uniswapV3Swap(\n        address pool,\n        bool zeroForOne,\n        int256 amount,\n        address recipient,\n        bytes calldata path\n    ) external;\n}\n"
    },
    "contracts/libraries/PoolAddress.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\nimport \"./Bytes.sol\";\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    using Bytes for bytes;\n\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n    // address internal constant UNISWAP_V3_FACTORY = 0x1F98431c8aD98523631AE4a59f267346ea31F984; // Ropsten\n    address internal constant UNISWAP_V3_FACTORY = 0x1F98431c8aD98523631AE4a59f267346ea31F984;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex\"ff\",\n                        UNISWAP_V3_FACTORY,\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                        POOL_INIT_CODE_HASH\n                    )\n                )\n            )\n        );\n    }\n\n    /// @notice Decodes the first pool in path\n    /// @param path The bytes encoded swap path\n    /// @return tokenA The first token of the given pool\n    /// @return tokenB The second token of the given pool\n    /// @return fee The fee level of the pool\n    function decodePool(bytes memory path)\n        internal\n        pure\n        returns (\n            address tokenA,\n            address tokenB,\n            uint24 fee\n        )\n    {\n        tokenA = path.toAddress(0);\n        fee = path.toUint24(20);\n        tokenB = path.toAddress(23);\n    }\n}\n"
    },
    "contracts/libraries/Bytes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0 <0.8.0;\n\nlibrary Bytes {\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_start + 20 >= _start, \"toAddress_overflow\");\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\n        require(_start + 3 >= _start, \"toUint24_overflow\");\n        require(_bytes.length >= _start + 3, \"toUint24_outOfBounds\");\n        uint24 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x3), _start))\n        }\n\n        return tempUint;\n    }\n}\n"
    },
    "contracts/interfaces/IDMMCaller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IDMMPool {\n    function getTradeInfo()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint112 _vReserve0,\n            uint112 _vReserve1,\n            uint256 feeInPrecision\n        );\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n}\n\ninterface IDMMCaller {\n    function dmmSwap(\n        address pool,\n        IERC20 from,\n        IERC20 to,\n        address target\n    ) external;\n}\n"
    },
    "contracts/OpenOceanExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"./interfaces/IERC20Permit.sol\";\nimport \"./interfaces/IOpenOceanCaller.sol\";\nimport \"./libraries/RevertReasonParser.sol\";\nimport \"./libraries/UniversalERC20.sol\";\n\ncontract OpenOceanExchange is OwnableUpgradeable, PausableUpgradeable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using UniversalERC20 for IERC20;\n\n    uint256 private constant _PARTIAL_FILL = 0x01;\n    uint256 private constant _SHOULD_CLAIM = 0x02;\n\n    struct SwapDescription {\n        IERC20 srcToken;\n        IERC20 dstToken;\n        address srcReceiver;\n        address dstReceiver;\n        uint256 amount;\n        uint256 minReturnAmount;\n        uint256 guaranteedAmount;\n        uint256 flags;\n        address referrer;\n        bytes permit;\n    }\n\n    event Swapped(\n        address indexed sender,\n        IERC20 indexed srcToken,\n        IERC20 indexed dstToken,\n        address dstReceiver,\n        uint256 amount,\n        uint256 spentAmount,\n        uint256 returnAmount,\n        uint256 minReturnAmount,\n        uint256 guaranteedAmount,\n        address referrer\n    );\n\n    function initialize() public initializer {\n        OwnableUpgradeable.__Ownable_init();\n        PausableUpgradeable.__Pausable_init();\n    }\n\n    function swap(\n        IOpenOceanCaller caller,\n        SwapDescription calldata desc,\n        IOpenOceanCaller.CallDescription[] calldata calls\n    ) external payable whenNotPaused returns (uint256 returnAmount) {\n        require(desc.minReturnAmount > 0, \"Min return should not be 0\");\n        require(calls.length > 0, \"Call data should exist\");\n\n        uint256 flags = desc.flags;\n        IERC20 srcToken = desc.srcToken;\n        IERC20 dstToken = desc.dstToken;\n\n        require(msg.value == (srcToken.isETH() ? desc.amount : 0), \"Invalid msg.value\");\n\n        if (flags & _SHOULD_CLAIM != 0) {\n            require(!srcToken.isETH(), \"Claim token is ETH\");\n            _claim(srcToken, desc.srcReceiver, desc.amount, desc.permit);\n        }\n\n        address dstReceiver = (desc.dstReceiver == address(0)) ? msg.sender : desc.dstReceiver;\n        uint256 initialSrcBalance = (flags & _PARTIAL_FILL != 0) ? srcToken.universalBalanceOf(msg.sender) : 0;\n        uint256 initialDstBalance = dstToken.universalBalanceOf(dstReceiver);\n\n        caller.makeCalls{value: msg.value}(calls);\n\n        uint256 spentAmount = desc.amount;\n        returnAmount = dstToken.universalBalanceOf(dstReceiver).sub(initialDstBalance);\n\n        if (flags & _PARTIAL_FILL != 0) {\n            spentAmount = initialSrcBalance.add(desc.amount).sub(srcToken.universalBalanceOf(msg.sender));\n            require(returnAmount.mul(desc.amount) >= desc.minReturnAmount.mul(spentAmount), \"Return amount is not enough\");\n        } else {\n            require(returnAmount >= desc.minReturnAmount, \"Return amount is not enough\");\n        }\n\n        _emitSwapped(desc, srcToken, dstToken, dstReceiver, spentAmount, returnAmount);\n    }\n\n    function _emitSwapped(\n        SwapDescription calldata desc,\n        IERC20 srcToken,\n        IERC20 dstToken,\n        address dstReceiver,\n        uint256 spentAmount,\n        uint256 returnAmount\n    ) private {\n        emit Swapped(\n            msg.sender,\n            srcToken,\n            dstToken,\n            dstReceiver,\n            desc.amount,\n            spentAmount,\n            returnAmount,\n            desc.minReturnAmount,\n            desc.guaranteedAmount,\n            desc.referrer\n        );\n    }\n\n    function _claim(\n        IERC20 token,\n        address dst,\n        uint256 amount,\n        bytes calldata permit\n    ) private {\n        // TODO: Is it safe to call permit on tokens without implemented permit? Fallback will be called. Is it bad for proxies?\n\n        if (permit.length == 32 * 7) {\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success, bytes memory result) = address(token).call(abi.encodeWithSelector(IERC20Permit.permit.selector, permit));\n            if (!success) {\n                revert(RevertReasonParser.parse(result, \"Permit call failed: \"));\n            }\n        }\n\n        token.safeTransferFrom(msg.sender, dst, amount);\n    }\n\n    function rescueFunds(IERC20 token, uint256 amount) external onlyOwner {\n        token.universalTransfer(msg.sender, amount);\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\ninterface IERC20Permit {\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/UniswapV2Exchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract UniswapV2Exchange {\n    uint256 private constant TRANSFER_FROM_CALL_SELECTOR_32 = 0x23b872dd00000000000000000000000000000000000000000000000000000000;\n    uint256 private constant WETH_DEPOSIT_CALL_SELECTOR_32 = 0xd0e30db000000000000000000000000000000000000000000000000000000000;\n    uint256 private constant WETH_WITHDRAW_CALL_SELECTOR_32 = 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000;\n    uint256 private constant ERC20_TRANSFER_CALL_SELECTOR_32 = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n    uint256 private constant ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\n    uint256 private constant REVERSE_MASK = 0x8000000000000000000000000000000000000000000000000000000000000000;\n    uint256 private constant WETH_MASK = 0x4000000000000000000000000000000000000000000000000000000000000000;\n    uint256 private constant NUMERATOR_MASK = 0x0000000000000000ffffffff0000000000000000000000000000000000000000;\n    uint256 private constant WETH = 0x000000000000000000000000C02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    // uint256 private constant WETH = 0x000000000000000000000000c778417E063141139Fce010982780140Aa0cD5Ab;\n    uint256 private constant UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32 =\n        0x0902f1ac00000000000000000000000000000000000000000000000000000000;\n    uint256 private constant UNISWAP_PAIR_SWAP_CALL_SELECTOR_32 =\n        0x022c0d9f00000000000000000000000000000000000000000000000000000000;\n    uint256 private constant DENOMINATOR = 1000000000;\n    uint256 private constant NUMERATOR_OFFSET = 160;\n\n    receive() external payable {\n        // cannot directly send eth to this contract\n        require(msg.sender != tx.origin);\n    }\n\n    function callUniswap(\n        IERC20 srcToken,\n        uint256 amount,\n        uint256 minReturn,\n        bytes32[] calldata /* pools */\n    ) public payable returns (uint256 returnAmount) {\n        assembly {\n            // solhint-disable-line no-inline-assembly\n            function reRevert() {\n                returndatacopy(0, 0, returndatasize())\n                revert(0, returndatasize())\n            }\n\n            function revertWithReason(m, len) {\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                mstore(0x20, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                mstore(0x40, m)\n                revert(0, len)\n            }\n\n            function swap(emptyPtr, swapAmount, pair, reversed, numerator, dst) -> ret {\n                mstore(emptyPtr, UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32)\n                if iszero(staticcall(gas(), pair, emptyPtr, 0x4, emptyPtr, 0x40)) {\n                    reRevert()\n                }\n\n                let reserve0 := mload(emptyPtr)\n                let reserve1 := mload(add(emptyPtr, 0x20))\n                if reversed {\n                    let tmp := reserve0\n                    reserve0 := reserve1\n                    reserve1 := tmp\n                }\n                ret := mul(swapAmount, numerator)\n                ret := div(mul(ret, reserve1), add(ret, mul(reserve0, DENOMINATOR)))\n\n                mstore(emptyPtr, UNISWAP_PAIR_SWAP_CALL_SELECTOR_32)\n                switch reversed\n                case 0 {\n                    mstore(add(emptyPtr, 0x04), 0)\n                    mstore(add(emptyPtr, 0x24), ret)\n                }\n                default {\n                    mstore(add(emptyPtr, 0x04), ret)\n                    mstore(add(emptyPtr, 0x24), 0)\n                }\n                mstore(add(emptyPtr, 0x44), dst)\n                mstore(add(emptyPtr, 0x64), 0x80)\n                mstore(add(emptyPtr, 0x84), 0)\n                if iszero(call(gas(), pair, 0, emptyPtr, 0xa4, 0, 0)) {\n                    reRevert()\n                }\n            }\n\n            let emptyPtr := mload(0x40)\n            mstore(0x40, add(emptyPtr, 0xc0))\n\n            let poolsOffset := add(calldataload(0x64), 0x4)\n            let poolsEndOffset := calldataload(poolsOffset)\n            poolsOffset := add(poolsOffset, 0x20)\n            poolsEndOffset := add(poolsOffset, mul(0x20, poolsEndOffset))\n            let rawPair := calldataload(poolsOffset)\n            switch srcToken\n            case 0 {\n                if iszero(eq(amount, callvalue())) {\n                    revertWithReason(0x00000011696e76616c6964206d73672e76616c75650000000000000000000000, 0x55) // \"invalid msg.value\"\n                }\n\n                mstore(emptyPtr, WETH_DEPOSIT_CALL_SELECTOR_32)\n                if iszero(call(gas(), WETH, amount, emptyPtr, 0x4, 0, 0)) {\n                    reRevert()\n                }\n\n                mstore(emptyPtr, ERC20_TRANSFER_CALL_SELECTOR_32)\n                mstore(add(emptyPtr, 0x4), and(rawPair, ADDRESS_MASK))\n                mstore(add(emptyPtr, 0x24), amount)\n                if iszero(call(gas(), WETH, 0, emptyPtr, 0x44, 0, 0)) {\n                    reRevert()\n                }\n            }\n            default {\n                if callvalue() {\n                    revertWithReason(0x00000011696e76616c6964206d73672e76616c75650000000000000000000000, 0x55) // \"invalid msg.value\"\n                }\n\n                mstore(emptyPtr, TRANSFER_FROM_CALL_SELECTOR_32)\n                mstore(add(emptyPtr, 0x4), caller())\n                mstore(add(emptyPtr, 0x24), and(rawPair, ADDRESS_MASK))\n                mstore(add(emptyPtr, 0x44), amount)\n                if iszero(call(gas(), srcToken, 0, emptyPtr, 0x64, 0, 0)) {\n                    reRevert()\n                }\n            }\n\n            returnAmount := amount\n\n            for {\n                let i := add(poolsOffset, 0x20)\n            } lt(i, poolsEndOffset) {\n                i := add(i, 0x20)\n            } {\n                let nextRawPair := calldataload(i)\n\n                returnAmount := swap(\n                    emptyPtr,\n                    returnAmount,\n                    and(rawPair, ADDRESS_MASK),\n                    and(rawPair, REVERSE_MASK),\n                    shr(NUMERATOR_OFFSET, and(rawPair, NUMERATOR_MASK)),\n                    and(nextRawPair, ADDRESS_MASK)\n                )\n\n                rawPair := nextRawPair\n            }\n\n            switch and(rawPair, WETH_MASK)\n            case 0 {\n                returnAmount := swap(\n                    emptyPtr,\n                    returnAmount,\n                    and(rawPair, ADDRESS_MASK),\n                    and(rawPair, REVERSE_MASK),\n                    shr(NUMERATOR_OFFSET, and(rawPair, NUMERATOR_MASK)),\n                    caller()\n                )\n            }\n            default {\n                returnAmount := swap(\n                    emptyPtr,\n                    returnAmount,\n                    and(rawPair, ADDRESS_MASK),\n                    and(rawPair, REVERSE_MASK),\n                    shr(NUMERATOR_OFFSET, and(rawPair, NUMERATOR_MASK)),\n                    address()\n                )\n\n                mstore(emptyPtr, WETH_WITHDRAW_CALL_SELECTOR_32)\n                mstore(add(emptyPtr, 0x04), returnAmount)\n                if iszero(call(gas(), WETH, 0, emptyPtr, 0x24, 0, 0)) {\n                    reRevert()\n                }\n\n                if iszero(call(gas(), caller(), returnAmount, 0, 0, 0, 0)) {\n                    reRevert()\n                }\n            }\n\n            if lt(returnAmount, minReturn) {\n                revertWithReason(0x000000164d696e2072657475726e206e6f742072656163686564000000000000, 0x5a) // \"Min return not reached\"\n            }\n        }\n    }\n}\n"
    },
    "contracts/state/BalancerV2State.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/state/IBalancerV2State.sol\";\n\nabstract contract BalancerV2State is IBalancerV2State {\n    function balancerV2WeightedPoolState(\n        address vault,\n        bytes32 poolId,\n        address pool\n    )\n        external\n        view\n        override\n        returns (\n            IERC20[] memory tokens,\n            uint256[] memory balances,\n            uint256 totalSupply,\n            uint256[] memory weights,\n            uint256 swapFee\n        )\n    {\n        (tokens, balances, ) = IVault(vault).getPoolTokens(poolId);\n        totalSupply = IERC20(pool).totalSupply();\n        weights = IWeightedPool(pool).getNormalizedWeights();\n        swapFee = IWeightedPool(pool).getSwapFeePercentage();\n        return (tokens, balances, totalSupply, weights, swapFee);\n    }\n\n    function balancerV2StablePoolState(\n        address vault,\n        bytes32 poolId,\n        address pool\n    )\n        external\n        view\n        override\n        returns (\n            IERC20[] memory tokens,\n            uint256[] memory balances,\n            uint256 totalSupply,\n            uint256 amp,\n            uint256 swapFee\n        )\n    {\n        (tokens, balances, ) = IVault(vault).getPoolTokens(poolId);\n        totalSupply = IERC20(pool).totalSupply();\n        (amp, , ) = IStablePool(pool).getAmplificationParameter();\n        swapFee = IStablePool(pool).getSwapFeePercentage();\n        return (tokens, balances, totalSupply, amp, swapFee);\n    }\n}\n"
    },
    "contracts/interfaces/state/IBalancerV2State.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IVault {\n    /**\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\n     * the tokens' `balances` changed.\n     *\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\n     *\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\n     * order as passed to `registerTokens`.\n     *\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\n     * instead.\n     */\n    function getPoolTokens(bytes32 poolId)\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            uint256[] memory balances,\n            uint256 lastChangeBlock\n        );\n}\n\ninterface IWeightedPool {\n    function getNormalizedWeights() external view returns (uint256[] memory);\n\n    function getSwapFeePercentage() external view returns (uint256);\n}\n\ninterface IStablePool {\n    function getAmplificationParameter()\n        external\n        view\n        returns (\n            uint256 value,\n            bool isUpdating,\n            uint256 precision\n        );\n\n    function getSwapFeePercentage() external view returns (uint256);\n}\n\ninterface IBalancerV2State {\n    function balancerV2WeightedPoolState(\n        address vault,\n        bytes32 poolId,\n        address pool\n    )\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            uint256[] memory balances,\n            uint256 totalSupply,\n            uint256[] memory weights,\n            uint256 swapFee\n        );\n\n    function balancerV2StablePoolState(\n        address vault,\n        bytes32 poolId,\n        address pool\n    )\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            uint256[] memory balances,\n            uint256 totalSupply,\n            uint256 amp,\n            uint256 swapFee\n        );\n}\n\n// TODO add Balancer V2 element pools\n"
    },
    "contracts/interfaces/state/IOpenOceanState.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"./IBalancerV2State.sol\";\nimport \"./ICurveState.sol\";\nimport \"./ISmoothyState.sol\";\nimport \"./IWooState.sol\";\n\ninterface IOpenOceanState is IBalancerV2State, ICurveState, ISmoothyState, IWooState {}\n"
    },
    "contracts/interfaces/state/ICurveState.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface ICurvePool {\n    function A() external view returns (uint256);\n\n    function fee() external view returns (uint256);\n}\n\n/**\n * @notice Pool contracts of curve.fi\n * See https://github.com/curvefi/curve-vue/blob/master/src/docs/README.md#how-to-integrate-curve-smart-contracts\n */\ninterface ICurvePoolV1 is ICurvePool {\n    function balances(int128 i) external view returns (uint256); // v1 version\n\n    function coins(int128 i) external view returns (address);\n\n    function underlying_coins(int128 i) external view returns (address);\n}\n\ninterface ICurvePoolV2 is ICurvePool {\n    function balances(uint256 i) external view returns (uint256);\n\n    function coins(uint256 i) external view returns (address);\n\n    function underlying_coins(uint256 i) external view returns (address);\n}\n\ninterface ICurveState {\n    struct CurvePoolStateQuery {\n        address pool;\n        uint8 nCoins;\n        uint8 version;\n        uint256 underlyingDecimals;\n        address rateCallee;\n        bytes rateCalldata;\n    }\n\n    function curvePoolState(CurvePoolStateQuery memory query)\n        external\n        view\n        returns (\n            uint256[] memory balances,\n            uint256[] memory underlying_balances,\n            uint256[] memory rates,\n            uint256 A,\n            uint256 fee\n        );\n}\n"
    },
    "contracts/interfaces/state/ISmoothyState.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\ninterface ISmoothyV1 {\n    function _ntokens() external view returns (uint256);\n\n    function _tokenInfos(uint256) external view returns (uint256);\n\n    function getBalance(uint256 tid) external view returns (uint256);\n\n    function _totalBalance() external view returns (uint256);\n\n    function _swapFee() external view returns (uint256);\n}\n\ninterface ISmoothyState {\n    function smoothyV1State(address smoothyV1)\n        external\n        view\n        returns (\n            uint256[] memory tokenInfos,\n            uint256[] memory tokenBalances,\n            uint256 totalBalance,\n            uint256 swapFee\n        );\n}\n"
    },
    "contracts/interfaces/state/IWooState.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface IWooPP {\n    /// @dev struct info to store the token info\n    struct TokenInfo {\n        uint112 reserve; // Token balance\n        uint112 threshold; // Threshold for reserve update\n        uint32 lastResetTimestamp; // Timestamp for last param update\n        uint64 lpFeeRate; // Fee rate: e.g. 0.001 = 0.1%\n        uint64 R; // Rebalance coefficient [0, 1]\n        uint112 target; // Targeted balance for pricing\n        bool isValid; // is this token info valid\n    }\n\n    function tokenInfo(address)\n        external\n        view\n        returns (\n            uint112 reserve, // Token balance\n            uint112 threshold, // Threshold for reserve update\n            uint32 lastResetTimestamp, // Timestamp for last param update\n            uint64 lpFeeRate, // Fee rate: e.g. 0.001 = 0.1%\n            uint64 R, // Rebalance coefficient [0, 1]\n            uint112 target, // Targeted balance for pricing\n            bool isValid // is this token info valid\n        );\n\n    function poolSize(address token) external view returns (uint256);\n}\n\ninterface IWooracle {\n    /// @dev returns the state for the given base token.\n    /// @param base baseToken address\n    /// @return priceNow the current price of base token\n    /// @return spreadNow the current spread of base token\n    /// @return coeffNow the slippage coefficient of base token\n    /// @return feasible whether the current state is feasible and valid\n    function state(address base)\n        external\n        view\n        returns (\n            uint256 priceNow,\n            uint256 spreadNow,\n            uint256 coeffNow,\n            bool feasible\n        );\n\n    /// @dev returns the last updated timestamp\n    /// @return the last updated timestamp\n    function timestamp() external view returns (uint256);\n}\n\ninterface IWooGuardian {\n    function refInfo(address)\n        external\n        view\n        returns (\n            address chainlinkRefOracle, // chainlink oracle for price checking\n            uint96 refPriceFixCoeff // chainlink price fix coeff\n        );\n}\n\ninterface AggregatorV3Interface {\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n\ninterface IWooState {\n    struct WooStateParam {\n        address token;\n        address wooPP;\n        address wooracle;\n        address wooGuardian;\n    }\n\n    struct Result {\n        uint112 reserve; // Token balance\n        uint64 lpFeeRate; // Fee rate: e.g. 0.001 = 0.1%\n        uint64 R; // Rebalance coefficient [0; 1]\n        uint112 target; // Targeted balance for pricing\n        bool isValid; // is this token info valid\n        uint256 p;\n        uint256 s;\n        uint256 k;\n        bool isFeasible;\n        uint256 refPrice;\n    }\n\n    function wooState(WooStateParam calldata param)\n        external\n        view\n        returns (\n            uint112 reserve, // Token balance\n            uint64 lpFeeRate, // Fee rate: e.g. 0.001 = 0.1%\n            uint64 R, // Rebalance coefficient [0, 1]\n            uint112 target, // Targeted balance for pricing\n            bool isValid, // is this token info valid\n            uint256 p,\n            uint256 s,\n            uint256 k,\n            bool isFeasible,\n            uint256 refPrice\n        );\n}\n"
    },
    "contracts/OpenOceanState.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/state/IOpenOceanState.sol\";\nimport \"./state/BalancerV2State.sol\";\nimport \"./state/CurveState.sol\";\nimport \"./state/SmoothyState.sol\";\nimport \"./state/WooState.sol\";\n\ncontract OpenOceanState is IOpenOceanState, BalancerV2State, CurveState, SmoothyState, WooState {}\n"
    },
    "contracts/state/CurveState.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nimport \"../interfaces/state/ICurveState.sol\";\n\nabstract contract CurveState is ICurveState {\n    using Address for address;\n    using SafeMath for uint256;\n\n    function curvePoolState(ICurveState.CurvePoolStateQuery memory query)\n        external\n        view\n        override\n        returns (\n            uint256[] memory balances,\n            uint256[] memory underlying_balances,\n            uint256[] memory rates,\n            uint256 A,\n            uint256 fee\n        )\n    {\n        balances = new uint256[](8);\n        for (uint256 i = 0; i < query.nCoins; i++) {\n            balances[i] = query.version == 1 ? ICurvePoolV1(query.pool).balances(int128(i)) : ICurvePoolV2(query.pool).balances(i);\n        }\n\n        rates = new uint256[](8);\n        if (query.underlyingDecimals > 0) {\n            address callee = query.rateCallee;\n            bytes memory data = query.rateCalldata;\n            address[] memory coins = new address[](query.nCoins);\n            if (data.length > 0 && callee == address(0)) {\n                for (uint256 i = 0; i < query.nCoins; i++) {\n                    coins[i] = query.version == 1 ? ICurvePoolV1(query.pool).coins(int128(i)) : ICurvePoolV2(query.pool).coins(i);\n                }\n            }\n            for (uint256 i = 0; i < query.nCoins; i++) {\n                if (data.length == 0) {\n                    rates[i] = 1e18;\n                } else {\n                    bytes memory result = (callee == address(0) ? coins[i] : callee).functionStaticCall(data);\n                    rates[i] = abi.decode(result, (uint256));\n                }\n            }\n        } else {\n            for (uint256 i = 0; i < query.nCoins; i++) {\n                rates[i] = 1e18;\n            }\n        }\n\n        underlying_balances = new uint256[](8);\n        if (query.underlyingDecimals > 0) {\n            for (uint256 i = 0; i < query.nCoins; i++) {\n                uint256 decimal = (query.underlyingDecimals >> (8 * i)) % 256;\n                underlying_balances[i] = balances[i].mul(rates[i]).div(10**decimal);\n            }\n        }\n\n        A = ICurvePool(query.pool).A();\n        fee = ICurvePool(query.pool).fee();\n\n        return (balances, underlying_balances, rates, A, fee);\n    }\n}\n"
    },
    "contracts/state/SmoothyState.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"../interfaces/state/ISmoothyState.sol\";\n\nabstract contract SmoothyState is ISmoothyState {\n    function smoothyV1State(address smoothyV1)\n        external\n        view\n        override\n        returns (\n            uint256[] memory tokenInfos,\n            uint256[] memory tokenBalances,\n            uint256 totalBalance,\n            uint256 swapFee\n        )\n    {\n        uint256 nTokens = ISmoothyV1(smoothyV1)._ntokens();\n\n        tokenInfos = new uint256[](nTokens);\n        tokenBalances = new uint256[](nTokens);\n        for (uint256 tid = 0; tid < nTokens; tid++) {\n            tokenInfos[tid] = ISmoothyV1(smoothyV1)._tokenInfos(tid);\n            tokenBalances[tid] = ISmoothyV1(smoothyV1).getBalance(tid);\n        }\n        totalBalance = ISmoothyV1(smoothyV1)._totalBalance();\n        swapFee = ISmoothyV1(smoothyV1)._swapFee();\n\n        return (tokenInfos, tokenBalances, totalBalance, swapFee);\n    }\n}\n"
    },
    "contracts/state/WooState.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../interfaces/state/IWooState.sol\";\n\nabstract contract WooState is IWooState {\n    using SafeMath for uint256;\n\n    function wooState(WooStateParam calldata param)\n        external\n        view\n        override\n        returns (\n            uint112, // Token balance\n            uint64, // Fee rate: e.g. 0.001 = 0.1%\n            uint64, // Rebalance coefficient [0, 1]\n            uint112, // Targeted balance for pricing\n            bool, // is this token info valid\n            uint256,\n            uint256,\n            uint256,\n            bool,\n            uint256\n        )\n    {\n        Result memory result;\n\n        {\n            uint32 lastResetTimestamp;\n            uint112 threshold;\n            result.reserve = uint112(IWooPP(param.wooPP).poolSize(param.token));\n            (, threshold, lastResetTimestamp, result.lpFeeRate, result.R, result.target, result.isValid) = IWooPP(param.wooPP)\n                .tokenInfo(param.token);\n            if (lastResetTimestamp != uint32(IWooracle(param.wooracle).timestamp())) {\n                result.target = threshold > result.reserve ? threshold : result.reserve;\n            }\n        }\n\n        (result.p, result.s, result.k, result.isFeasible) = IWooracle(param.wooracle).state(param.token);\n\n        {\n            (address chainlinkRefOracle, uint96 refPriceFixCoeff) = IWooGuardian(param.wooGuardian).refInfo(param.token);\n            (, int256 rawBaseRefPrice, , , ) = AggregatorV3Interface(chainlinkRefOracle).latestRoundData();\n            result.refPrice = rawBaseRefPrice >= 0 ? uint256(rawBaseRefPrice).mul(refPriceFixCoeff) : 0;\n        }\n\n        return (\n            result.reserve,\n            result.lpFeeRate,\n            result.R,\n            result.target,\n            result.isValid,\n            result.p,\n            result.s,\n            result.k,\n            result.isFeasible,\n            result.refPrice\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/UpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./Proxy.sol\";\nimport \"../utils/Address.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n *\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\n * {TransparentUpgradeableProxy}.\n */\ncontract UpgradeableProxy is Proxy {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) public payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _setImplementation(_logic);\n        if(_data.length > 0) {\n            Address.functionDelegateCall(_logic, _data);\n        }\n    }\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            impl := sload(slot)\n        }\n    }\n\n    /**\n     * @dev Upgrades the proxy to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal virtual {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, newImplementation)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 { revert(0, returndatasize()) }\n            default { return(0, returndatasize()) }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./UpgradeableProxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is UpgradeableProxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\n     */\n    constructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _setAdmin(admin_);\n    }\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _admin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _admin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        require(newAdmin != address(0), \"TransparentUpgradeableProxy: new admin is the zero address\");\n        emit AdminChanged(_admin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external virtual ifAdmin {\n        _upgradeTo(newImplementation);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtual ifAdmin {\n        _upgradeTo(newImplementation);\n        Address.functionDelegateCall(newImplementation, data);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address adm) {\n        bytes32 slot = _ADMIN_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            adm := sload(slot)\n        }\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        bytes32 slot = _ADMIN_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, newAdmin)\n        }\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _admin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../access/Ownable.sol\";\nimport \"./TransparentUpgradeableProxy.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/OpenOceanExchangeProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"@openzeppelin/contracts/proxy/ProxyAdmin.sol\";\n\ncontract OpenOceanExchangeProxyAdmin is ProxyAdmin {}\n"
    },
    "contracts/OpenOceanExchangeProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\";\n\ncontract OpenOceanExchangeProxy is TransparentUpgradeableProxy {\n    constructor(\n        address logic,\n        address admin,\n        bytes memory data\n    ) public TransparentUpgradeableProxy(logic, admin, data) {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}